<div class="d-flex justify-content-center mt-4">
    <ul class="pagination">
        <!-- Nút Previous -->
        <li class="page-item @(CurrentPage == 1 ? "disabled" : "")">
            <button class="page-link" @onclick="GoToPreviousPage" aria-label="Previous">
                Previous
            </button>
        </li>

        <!-- Hiển thị số trang -->
        @for (int i = 1; i <= TotalPages; i++)
        {
            <li class="page-item @(i == CurrentPage ? "active" : "")">
                <button class="page-link" @onclick="() => GoToPage(i)">
                    @i
                </button>
            </li>
        }

        <!-- Nút Next -->
        <li class="page-item @(CurrentPage == TotalPages ? "disabled" : "")">
            <button class="page-link" @onclick="GoToNextPage" aria-label="Next">
                Next
            </button>
        </li>
    </ul>
</div>


@code {
    [Parameter]
    public int TotalItems { get; set; } // Tổng số mục

    [Parameter]
    public int ItemsPerPage { get; set; } = 10; // Số mục trên mỗi trang (mặc định: 10)

    [Parameter]
    public EventCallback<int> OnPageChanged { get; set; } // Callback khi trang thay đổi

    private int TotalPages => (int)Math.Ceiling((double)TotalItems / ItemsPerPage); // Tổng số trang
    private int CurrentPage { get; set; } = 1; // Trang hiện tại

    private async Task GoToPage(int page)
    {
        if (page >= 1 && page <= TotalPages)
        {
            CurrentPage = page;
            await OnPageChanged.InvokeAsync(CurrentPage); // Gọi callback
        }
    }

    private async Task GoToPreviousPage()
    {
        if (CurrentPage > 1)
        {
            await GoToPage(CurrentPage - 1);
        }
    }

    private async Task GoToNextPage()
    {
        if (CurrentPage < TotalPages)
        {
            await GoToPage(CurrentPage + 1);
        }
    }
}
