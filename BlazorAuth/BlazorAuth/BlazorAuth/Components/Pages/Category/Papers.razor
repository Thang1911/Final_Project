@page "/Papers"
@inject HttpClient Http
@using BlazorAuth.Components.Common
@using Models.Category
@rendermode InteractiveServer

<h1 class="text-center mb-3">List of Papers</h1>

@if (_pagedPapers == null)
{
    <p><em>Loading ...</em></p>
}
else
{
    <div>
        <SearchComponent OnSearch="UpdateFilteredPapers"></SearchComponent>

        <button class="btn btn-primary" @onclick="ShowAddPaperForm">Add Paper</button>
    </div>

    <table class="table mt-3">
        <thead>
            <tr>
                <th>Id</th>
                <th>Paper Name</th>
                <th>Created date</th>
                <th>Updated date</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var paper in _pagedPapers)
            {
                <tr>
                    <td>@paper.id</td>
                    <td>@paper.paper_name</td>
                    <td>@paper.created_at.ToShortDateString()</td>
                    <td>@paper.updated_at.ToShortDateString()</td>
                    <td>
                        <button class="btn btn-warning btn-sm" @onclick="() => EditPaper(paper)">Edit</button>
                        <button class="btn btn-danger btn-sm" @onclick="() => DeletePaper(paper.id)">Delete</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>

    <Pagination TotalItems="@(_filteredPapers?.Count ?? 0)" ItemsPerPage="15" OnPageChanged="LoadPageData" />

    @if (isAddPaperFormVisible)
    {
        <div class="modal show" style="display:block;">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">Add New Paper</h5>
                        <button type="button" class="close" @onclick="HideAddPaperForm">&times;</button>
                    </div>
                    <div class="modal-body">
                        <EditForm Model="@newPaper" OnValidSubmit="HandleAddPaper">
                            <DataAnnotationsValidator />
                            <ValidationSummary />

                            <div class="form-group">
                                <label for="paperName">Paper Name</label>
                                <InputText id="paperName" class="form-control" @bind-Value="newPaper.paper_name" />
                            </div>

                            <button type="submit" class="btn btn-primary">Add Paper</button>
                        </EditForm>
                    </div>
                </div>
            </div>
        </div>
    }

    @if (isEditPaperFormVisible)
    {
        <div class="modal show" style="display:block;">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">Edit Paper</h5>
                        <button type="button" class="close" @onclick="HideEditPaperForm">&times;</button>
                    </div>
                    <div class="modal-body">
                        <EditForm Model="@paperToEdit" OnValidSubmit="HandleEditPaper">
                            <DataAnnotationsValidator />
                            <ValidationSummary />

                            <div class="form-group">
                                <label for="paperName">Paper Name</label>
                                <InputText id="paperName" class="form-control" @bind-Value="paperToEdit.paper_name" />
                            </div>

                            <button type="submit" class="btn btn-primary">Save Changes</button>
                        </EditForm>
                    </div>
                </div>
            </div>
        </div>
    }

    @if (isDeleteConfirmationVisible)
    {
        <div class="modal show" style="display:block;">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">Confirm Delete</h5>
                        <button type="button" class="close" @onclick="HideDeleteConfirmationModal">&times;</button>
                    </div>
                    <div class="modal-body">
                        <p>Are you sure you want to delete the paper <strong>@paperToDelete?.paper_name</strong>?</p>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" @onclick="HideDeleteConfirmationModal">Cancel</button>
                        <button type="button" class="btn btn-danger" @onclick="ConfirmDeletePaper">Delete</button>
                    </div>
                </div>
            </div>
        </div>
    }
}

@code {
    private List<Paper>? papers;
    private List<Paper>? _filteredPapers;
    private List<Paper>? _pagedPapers;

    private int itemsPerPage = 15;
    private Paper newPaper = new Paper();
    private bool isAddPaperFormVisible = false;

    private bool isEditPaperFormVisible = false;
    private Paper paperToEdit = new Paper();

    private bool isDeleteConfirmationVisible = false;
    private Paper paperToDelete;

    protected override async Task OnInitializedAsync()
    {
        papers = await Http.GetFromJsonAsync<List<Paper>>("http://localhost:5160/api/Papers");
        _filteredPapers = papers;
        LoadPageData(1);
    }

    private void UpdateFilteredPapers(string searchItem)
    {
        if (string.IsNullOrEmpty(searchItem))
        {
            _filteredPapers = papers.ToList();
        }
        else
        {
            _filteredPapers = papers
                .Where(paper => paper.paper_name.Contains(searchItem, StringComparison.OrdinalIgnoreCase))
                .ToList();
        }

        LoadPageData(1);
    }

    private void LoadPageData(int currentPage)
    {
        int startIndex = (currentPage - 1) * itemsPerPage;
        _pagedPapers = _filteredPapers?.Skip(startIndex).Take(itemsPerPage).ToList();
    }

    private void ShowAddPaperForm()
    {
        isAddPaperFormVisible = true;
    }

    private void HideAddPaperForm()
    {
        isAddPaperFormVisible = false;
    }

    private async Task HandleAddPaper()
    {
        if (!string.IsNullOrEmpty(newPaper.paper_name))
        {
            newPaper.id = Guid.NewGuid().ToString();
            newPaper.created_at = DateTime.Now;
            newPaper.updated_at = DateTime.Now;

            var response = await Http.PostAsJsonAsync("http://localhost:5160/api/Papers", newPaper);

            if (response.IsSuccessStatusCode)
            {
                newPaper.paper_name = "";
                papers = await Http.GetFromJsonAsync<List<Paper>>("http://localhost:5160/api/Papers");
                _filteredPapers = papers;
                LoadPageData(1);
                HideAddPaperForm();
            }
            else
            {
                Console.WriteLine("Add paper failed.");
            }
        }
    }

    private void EditPaper(Paper paper)
    {
        paperToEdit = new Paper
            {
                id = paper.id,
                paper_name = paper.paper_name
            };
        isEditPaperFormVisible = true;
    }

    private void HideEditPaperForm()
    {
        isEditPaperFormVisible = false;
    }

    private async Task HandleEditPaper()
    {
        var updatedPaper = new Paper
            {
                id = paperToEdit.id,
                paper_name = paperToEdit.paper_name,
                created_at = paperToEdit.created_at,
                updated_at = DateTime.Now
            };

        var response = await Http.PutAsJsonAsync($"http://localhost:5160/api/Papers/{paperToEdit.id}", updatedPaper);

        if (response.IsSuccessStatusCode)
        {
            papers = await Http.GetFromJsonAsync<List<Paper>>("http://localhost:5160/api/Papers");
            _filteredPapers = papers;
            LoadPageData(1);
            HideEditPaperForm();
        }
        else
        {
            Console.WriteLine("Update paper failed.");
        }
    }

    private void DeletePaper(string paperId)
    {
        paperToDelete = _pagedPapers?.FirstOrDefault(paper => paper.id == paperId);
        isDeleteConfirmationVisible = true;
    }

    private void HideDeleteConfirmationModal()
    {
        isDeleteConfirmationVisible = false;
    }

    private async Task ConfirmDeletePaper()
    {
        var response = await Http.DeleteAsync($"http://localhost:5160/api/Papers/{paperToDelete.id}");

        if (response.IsSuccessStatusCode)
        {
            papers = await Http.GetFromJsonAsync<List<Paper>>("http://localhost:5160/api/Papers");
            _filteredPapers = papers;
            LoadPageData(1);
        }
        else
        {
            Console.WriteLine("Delete paper failed.");
        }

        HideDeleteConfirmationModal();
    }
}

