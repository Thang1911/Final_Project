@page "/Trainings"
@inject HttpClient Http
@using BlazorAuth.Components.Common
@using Models.Category
@rendermode InteractiveServer

<h1 class="text-center mb-3">List of Trainings</h1>

@if (_pagedTrainings == null)
{
    <p><em>Loading ...</em></p>
}
else
{
    <div>
        <SearchComponent OnSearch="UpdateFilteredTrainings"></SearchComponent>

        <button class="btn btn-primary" @onclick="ShowAddTrainingForm">Add Training</button>
    </div>

    <table class="table mt-3">
        <thead>
            <tr>
                <th>Id</th>
                <th>Training Name</th>
                <th>Created date</th>
                <th>Updated date</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var training in _pagedTrainings)
            {
                <tr>
                    <td>@training.id</td>
                    <td>@training.training_name</td>
                    <td>@training.created_at.ToShortDateString()</td>
                    <td>@training.updated_at.ToShortDateString()</td>
                    <td>
                        <button class="btn btn-warning btn-sm" @onclick="() => EditTraining(training)">Edit</button>
                        <button class="btn btn-danger btn-sm" @onclick="() => DeleteTraining(training.id)">Delete</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>

    <Pagination TotalItems="@(_filteredTrainings?.Count ?? 0)" ItemsPerPage="15" OnPageChanged="LoadPageData" />

    @if (isAddTrainingFormVisible)
    {
        <div class="modal show" style="display:block;">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">Add New Training</h5>
                        <button type="button" class="close" @onclick="HideAddTrainingForm">&times;</button>
                    </div>
                    <div class="modal-body">
                        <EditForm Model="@newTraining" OnValidSubmit="HandleAddTraining">
                            <DataAnnotationsValidator />
                            <ValidationSummary />

                            <div class="form-group">
                                <label for="trainingName">Training Name</label>
                                <InputText id="trainingName" class="form-control" @bind-Value="newTraining.training_name" />
                            </div>

                            <button type="submit" class="btn btn-primary">Add Training</button>
                        </EditForm>
                    </div>
                </div>
            </div>
        </div>
    }

    @if (isEditTrainingFormVisible)
    {
        <div class="modal show" style="display:block;">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">Edit Training</h5>
                        <button type="button" class="close" @onclick="HideEditTrainingForm">&times;</button>
                    </div>
                    <div class="modal-body">
                        <EditForm Model="@trainingToEdit" OnValidSubmit="HandleEditTraining">
                            <DataAnnotationsValidator />
                            <ValidationSummary />

                            <div class="form-group">
                                <label for="trainingName">Training Name</label>
                                <InputText id="trainingName" class="form-control" @bind-Value="trainingToEdit.training_name" />
                            </div>

                            <button type="submit" class="btn btn-primary">Save Changes</button>
                        </EditForm>
                    </div>
                </div>
            </div>
        </div>
    }

    @if (isDeleteConfirmationVisible)
    {
        <div class="modal show" style="display:block;">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">Confirm Delete</h5>
                        <button type="button" class="close" @onclick="HideDeleteConfirmationModal">&times;</button>
                    </div>
                    <div class="modal-body">
                        <p>Are you sure you want to delete the training <strong>@trainingToDelete?.training_name</strong>?</p>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" @onclick="HideDeleteConfirmationModal">Cancel</button>
                        <button type="button" class="btn btn-danger" @onclick="ConfirmDeleteTraining">Delete</button>
                    </div>
                </div>
            </div>
        </div>
    }
}

@code {
    private List<Training>? trainings;
    private List<Training>? _filteredTrainings;
    private List<Training>? _pagedTrainings;

    private int itemsPerPage = 15;
    private Training newTraining = new Training();
    private bool isAddTrainingFormVisible = false;

    private bool isEditTrainingFormVisible = false;
    private Training trainingToEdit = new Training();

    private bool isDeleteConfirmationVisible = false;
    private Training trainingToDelete;

    protected override async Task OnInitializedAsync()
    {
        trainings = await Http.GetFromJsonAsync<List<Training>>("http://localhost:5160/api/Trainings");
        _filteredTrainings = trainings;
        LoadPageData(1);
    }

    private void UpdateFilteredTrainings(string searchItem)
    {
        if (string.IsNullOrEmpty(searchItem))
        {
            _filteredTrainings = trainings.ToList();
        }
        else
        {
            _filteredTrainings = trainings
                .Where(training => training.training_name.Contains(searchItem, StringComparison.OrdinalIgnoreCase))
                .ToList();
        }

        LoadPageData(1);
    }

    private void LoadPageData(int currentPage)
    {
        int startIndex = (currentPage - 1) * itemsPerPage;
        _pagedTrainings = _filteredTrainings?.Skip(startIndex).Take(itemsPerPage).ToList();
    }

    private void ShowAddTrainingForm()
    {
        isAddTrainingFormVisible = true;
    }

    private void HideAddTrainingForm()
    {
        isAddTrainingFormVisible = false;
    }

    private async Task HandleAddTraining()
    {
        if (!string.IsNullOrEmpty(newTraining.training_name))
        {
            newTraining.id = Guid.NewGuid().ToString();
            newTraining.created_at = DateTime.Now;
            newTraining.updated_at = DateTime.Now;

            var response = await Http.PostAsJsonAsync("http://localhost:5160/api/Trainings", newTraining);

            if (response.IsSuccessStatusCode)
            {
                trainings = await Http.GetFromJsonAsync<List<Training>>("http://localhost:5160/api/Trainings");
                _filteredTrainings = trainings;
                LoadPageData(1);
                HideAddTrainingForm();
            }
            else
            {
                Console.WriteLine("Add training failed");
            }
        }
    }

    private void EditTraining(Training training)
    {
        trainingToEdit = new Training
            {
                id = training.id,
                training_name = training.training_name
            };
        isEditTrainingFormVisible = true;
    }

    private void HideEditTrainingForm()
    {
        isEditTrainingFormVisible = false;
    }

    private async Task HandleEditTraining()
    {
        var updatedTraining = new Training
            {
                id = trainingToEdit.id,
                training_name = trainingToEdit.training_name,
                created_at = trainingToEdit.created_at,
                updated_at = DateTime.Now
            };

        var response = await Http.PutAsJsonAsync($"http://localhost:5160/api/Trainings/{trainingToEdit.id}", updatedTraining);

        if (response.IsSuccessStatusCode)
        {
            trainings = await Http.GetFromJsonAsync<List<Training>>("http://localhost:5160/api/Trainings");
            _filteredTrainings = trainings;
            LoadPageData(1);
            HideEditTrainingForm();
        }
        else
        {
            Console.WriteLine("Edit training failed");
        }
    }

    private void DeleteTraining(string trainingId)
    {
        trainingToDelete = _pagedTrainings?.FirstOrDefault(training => training.id == trainingId);
        isDeleteConfirmationVisible = true;
    }

    private void HideDeleteConfirmationModal()
    {
        isDeleteConfirmationVisible = false;
    }

    private async Task ConfirmDeleteTraining()
    {
        var response = await Http.DeleteAsync($"http://localhost:5160/api/Trainings/{trainingToDelete.id}");

        if (response.IsSuccessStatusCode)
        {
            trainings = await Http.GetFromJsonAsync<List<Training>>("http://localhost:5160/api/Trainings");
            _filteredTrainings = trainings;
            LoadPageData(1);
        }
        else
        {
            Console.WriteLine("Delete training failed");
        }

        HideDeleteConfirmationModal();
    }
}
