@page "/Proposes"
@inject HttpClient Http
@using BlazorAuth.Models.Category
@using BlazorAuth.Components.Common
@rendermode InteractiveServer

<h1 class="text-center mb-3">List of Proposes</h1>

@if (_pagedProposes == null)
{
    <p><em>Loading ...</em></p>
}
else
{
    <div>
        <SearchComponent OnSearch="UpdateFilteredProposes"></SearchComponent>

        <button class="btn btn-primary" @onclick="ShowAddProposeForm">Add Propose</button>
    </div>

    <table class="table mt-3">
        <thead>
            <tr>
                <th>Id</th>
                <th>Propose Name</th>
                <th>Created Date</th>
                <th>Updated Date</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var propose in _pagedProposes)
            {
                <tr>
                    <td>@propose.id</td>
                    <td>@propose.propose_name</td>
                    <td>@propose.created_at.ToShortDateString()</td>
                    <td>@propose.updated_at.ToShortDateString()</td>
                    <td>
                        <button class="btn btn-warning btn-sm" @onclick="() => EditPropose(propose)">Edit</button>
                        <button class="btn btn-danger btn-sm" @onclick="() => DeletePropose(propose.id)">Delete</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>

    <Pagination TotalItems="@(_filteredProposes?.Count ?? 0)" ItemsPerPage="15" OnPageChanged="LoadPageData" />

    @if (isAddProposeFormVisible)
    {
        <div class="modal show" style="display:block;">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">Add New Propose</h5>
                        <button type="button" class="close" @onclick="HideAddProposeForm">&times;</button>
                    </div>
                    <div class="modal-body">
                        <EditForm Model="@newPropose" OnValidSubmit="HandleAddPropose">
                            <DataAnnotationsValidator />
                            <ValidationSummary />

                            <div class="form-group">
                                <label for="proposeName">Propose Name</label>
                                <InputText id="proposeName" class="form-control" @bind-Value="newPropose.propose_name" />
                            </div>

                            <button type="submit" class="btn btn-primary">Add Propose</button>
                        </EditForm>
                    </div>
                </div>
            </div>
        </div>
    }

    @if (isEditProposeFormVisible)
    {
        <div class="modal show" style="display:block;">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">Edit Propose</h5>
                        <button type="button" class="close" @onclick="HideEditProposeForm">&times;</button>
                    </div>
                    <div class="modal-body">
                        <EditForm Model="@proposeToEdit" OnValidSubmit="HandleEditPropose">
                            <DataAnnotationsValidator />
                            <ValidationSummary />

                            <div class="form-group">
                                <label for="proposeName">Propose Name</label>
                                <InputText id="proposeName" class="form-control" @bind-Value="proposeToEdit.propose_name" />
                            </div>

                            <button type="submit" class="btn btn-primary">Save Changes</button>
                        </EditForm>
                    </div>
                </div>
            </div>
        </div>
    }

    @if (isDeleteConfirmationVisible)
    {
        <div class="modal show" style="display:block;">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">Confirm Delete</h5>
                        <button type="button" class="close" @onclick="HideDeleteConfirmationModal">&times;</button>
                    </div>
                    <div class="modal-body">
                        <p>Are you sure you want to delete the propose <strong>@proposeToDelete?.propose_name</strong>?</p>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" @onclick="HideDeleteConfirmationModal">Cancel</button>
                        <button type="button" class="btn btn-danger" @onclick="ConfirmDeletePropose">Delete</button>
                    </div>
                </div>
            </div>
        </div>
    }
}

@code {
    private List<Propose>? proposes;
    private List<Propose>? _filteredProposes;
    private List<Propose>? _pagedProposes;

    private int itemsPerPage = 15;
    private Propose newPropose = new Propose();
    private bool isAddProposeFormVisible = false;

    private bool isEditProposeFormVisible = false;
    private Propose proposeToEdit = new Propose();

    private bool isDeleteConfirmationVisible = false;
    private Propose proposeToDelete;

    protected override async Task OnInitializedAsync()
    {
        proposes = await Http.GetFromJsonAsync<List<Propose>>("http://localhost:5160/api/Proposes");
        _filteredProposes = proposes;
        LoadPageData(1);
    }

    private void UpdateFilteredProposes(string searchItem)
    {
        if (string.IsNullOrEmpty(searchItem))
        {
            _filteredProposes = proposes.ToList();
        }
        else
        {
            _filteredProposes = proposes
                .Where(propose => propose.propose_name.Contains(searchItem, StringComparison.OrdinalIgnoreCase))
                .ToList();
        }

        LoadPageData(1);
    }

    private void LoadPageData(int currentPage)
    {
        int startIndex = (currentPage - 1) * itemsPerPage;
        _pagedProposes = _filteredProposes?.Skip(startIndex).Take(itemsPerPage).ToList();
    }

    private void ShowAddProposeForm() => isAddProposeFormVisible = true;
    private void HideAddProposeForm() => isAddProposeFormVisible = false;

    private async Task HandleAddPropose()
    {
        if (!string.IsNullOrEmpty(newPropose.propose_name))
        {
            newPropose.id = Guid.NewGuid().ToString();
            newPropose.created_at = DateTime.Now;
            newPropose.updated_at = DateTime.Now;

            var response = await Http.PostAsJsonAsync("http://localhost:5160/api/Proposes", newPropose);

            if (response.IsSuccessStatusCode)
            {
                newPropose.propose_name = "";
                proposes = await Http.GetFromJsonAsync<List<Propose>>("http://localhost:5160/api/Proposes");
                _filteredProposes = proposes;
                LoadPageData(1);
                HideAddProposeForm();
            }
            else
            {
                Console.WriteLine("Add propose failed.");
            }
        }
    }

    private void EditPropose(Propose propose)
    {
        proposeToEdit = new Propose
        {
            id = propose.id,
            propose_name = propose.propose_name
        };
        isEditProposeFormVisible = true;
    }

    private void HideEditProposeForm() => isEditProposeFormVisible = false;

    private async Task HandleEditPropose()
    {
        var updatedPropose = new Propose
        {
            id = proposeToEdit.id,
            propose_name = proposeToEdit.propose_name,
            created_at = proposeToEdit.created_at,
            updated_at = DateTime.Now
        };

        var response = await Http.PutAsJsonAsync($"http://localhost:5160/api/Proposes/{proposeToEdit.id}", updatedPropose);

        if (response.IsSuccessStatusCode)
        {
            proposes = await Http.GetFromJsonAsync<List<Propose>>("http://localhost:5160/api/Proposes");
            _filteredProposes = proposes;
            LoadPageData(1);
            HideEditProposeForm();
        }
        else
        {
            Console.WriteLine("Update propose failed.");
        }
    }

    private void DeletePropose(string proposeId)
    {
        proposeToDelete = _pagedProposes?.FirstOrDefault(propose => propose.id == proposeId);
        isDeleteConfirmationVisible = true;
    }

    private void HideDeleteConfirmationModal() => isDeleteConfirmationVisible = false;

    private async Task ConfirmDeletePropose()
    {
        var response = await Http.DeleteAsync($"http://localhost:5160/api/Proposes/{proposeToDelete.id}");

        if (response.IsSuccessStatusCode)
        {
            proposes = await Http.GetFromJsonAsync<List<Propose>>("http://localhost:5160/api/Proposes");
            _filteredProposes = proposes;
            LoadPageData(1);
        }
        else
        {
            Console.WriteLine("Delete propose failed.");
        }

        HideDeleteConfirmationModal();
    }
}
