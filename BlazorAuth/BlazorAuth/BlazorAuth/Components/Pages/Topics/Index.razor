@page "/Topics"
@inject HttpClient Http
@using BlazorAuth.Models.Topics
@using BlazorAuth.Components.Common
@inject NavigationManager navManager
@rendermode InteractiveServer

<h3>Topics</h3>

@if (_pagedTopics == null)
{
    <p><em>Loading ...</em></p>
}
else
{
    <div class="d-flex justify-content-between mb-3">
        <SearchComponent OnSearch="UpdateFilteredTopics"></SearchComponent>
        <button class="btn btn-primary" @onclick="NavigateToAddTopic">Add Topic</button>
    </div>

    <table class="table mt-3">
        <thead>
            <tr>
                <th>Id</th>
                <th>Topic Name</th>
                <th>Result</th>
                <th>Level Topic Id</th>
                <th>Start Date</th>
                <th>End Date</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var topic in _pagedTopics)
            {
                <tr>
                    <td>@topic.id</td>
                    <td>@topic.topic_name</td>
                    <td>@topic.result</td>
                    <td>@topic.lvtopic_id</td>
                    <td>@topic.start_date.ToShortDateString()</td>
                    <td>@topic.end_date.ToShortDateString()</td>
                    <td>
                        <button class="btn btn-warning btn-sm" @onclick="() => EditTopic(topic)">Edit</button>
                        <button class="btn btn-danger btn-sm" @onclick="() => DeleteTopic(topic.id)">Delete</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>

    <Pagination TotalItems="@(_filteredTopics?.Count ?? 0)" ItemsPerPage="itemsPerPage" OnPageChanged="LoadPageData" />

    @if (isEditTopicFormVisible)
    {
        <div class="modal show" style="display:block;">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">Edit Topic</h5>
                        <button type="button" class="close" @onclick="HideEditTopicForm">&times;</button>
                    </div>
                    <div class="modal-body">
                        <EditForm Model="@topicToEdit" OnValidSubmit="HandleEditTopic">
                            <DataAnnotationsValidator />
                            <ValidationSummary />

                            <div class="form-group">
                                <label for="topicName">Topic Name</label>
                                <InputText id="topicName" class="form-control" @bind-Value="topicToEdit.topic_name" />
                            </div>
                            <div class="form-group">
                                <label for="startDate">Start Date</label>
                                <InputDate id="startDate" class="form-control" @bind-Value="topicToEdit.start_date" />
                            </div>
                            <div class="form-group">
                                <label for="endDate">End Date</label>
                                <InputDate id="endDate" class="form-control" @bind-Value="topicToEdit.end_date" />
                            </div>

                            <button type="submit" class="btn btn-primary">Save Changes</button>
                        </EditForm>
                    </div>
                </div>
            </div>
        </div>
    }
}

@code {
    private List<Topic>? topics;
    private List<Topic>? _filteredTopics;
    private List<Topic>? _pagedTopics;

    private int itemsPerPage = 10;
    private bool isEditTopicFormVisible = false;
    private Topic topicToEdit = new Topic();

    protected override async Task OnInitializedAsync()
    {
        topics = await Http.GetFromJsonAsync<List<Topic>>("http://localhost:5160/api/Topics");
        _filteredTopics = topics;
        LoadPageData(1);
    }

    private void UpdateFilteredTopics(string searchItem)
    {
        if (string.IsNullOrEmpty(searchItem))
        {
            _filteredTopics = topics.ToList();
        }
        else
        {
            _filteredTopics = topics
                .Where(topic => topic.topic_name.Contains(searchItem, StringComparison.OrdinalIgnoreCase))
                .ToList();
        }

        LoadPageData(1);
    }

    private void LoadPageData(int currentPage)
    {
        int startIndex = (currentPage - 1) * itemsPerPage;
        _pagedTopics = _filteredTopics?.Skip(startIndex).Take(itemsPerPage).ToList();
    }

    private void NavigateToAddTopic()
    {
        navManager.NavigateTo("/Topics/Add");
    }

    private void EditTopic(Topic topic)
    {
        topicToEdit = new Topic
            {
                id = topic.id,
                topic_name = topic.topic_name,
                result = topic.result,
                lvtopic_id = topic.lvtopic_id,
                start_date = topic.start_date,
                end_date = topic.end_date
            };
        isEditTopicFormVisible = true;
    }

    private void HideEditTopicForm()
    {
        isEditTopicFormVisible = false;
    }

    private async Task HandleEditTopic()
    {
        var response = await Http.PutAsJsonAsync($"http://localhost:5160/api/Topics/{topicToEdit.id}", topicToEdit);

        if (response.IsSuccessStatusCode)
        {
            topics = await Http.GetFromJsonAsync<List<Topic>>("http://localhost:5160/api/Topics");
            _filteredTopics = topics;
            LoadPageData(1);
            HideEditTopicForm();
        }
        else
        {
            Console.WriteLine("Edit topic failed.");
        }
    }

    private async Task DeleteTopic(string topicId)
    {
        var response = await Http.DeleteAsync($"http://localhost:5160/api/Topics/{topicId}");

        if (response.IsSuccessStatusCode)
        {
            topics = await Http.GetFromJsonAsync<List<Topic>>("http://localhost:5160/api/Topics");
            _filteredTopics = topics;
            LoadPageData(1);
        }
        else
        {
            Console.WriteLine("Delete topic failed.");
        }
    }
}
