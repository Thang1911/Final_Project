@page "/Mock"
@inject HttpClient Http
@using BlazorAuth.Components.Common
@using Models.Mock
@rendermode InteractiveServer

<h1 class="text-center mb-3">List of Posts</h1>

@if (_pagedPosts == null)
{
    <p><em>Loading ...</em></p>
}
else
{
    <div>
        <!-- Sử dụng SearchComponent -->
        <SearchComponent OnSearch="UpdateFilteredPosts"></SearchComponent>
    </div>
    <table class="table">
        <thead>
            <tr>
                <th>Id</th>
                <th>User Id</th>
                <th>Title</th>
                <th>Body</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var post in _pagedPosts)
            {
                <tr>
                    <td>@post.id</td>
                    <td>@post.userId</td>
                    <td>@post.title</td>
                    <td>@post.body</td>
                </tr>
            }
        </tbody>
    </table>

    <!-- Thêm Pagination -->
    <Pagination TotalItems="@(_filteredPosts?.Count ?? 0)" ItemsPerPage="15" OnPageChanged="LoadPageData" />
}

@code {
    private List<Post>? posts;
    private List<Post>? _filteredPosts;
    private List<Post>? _pagedPosts;

    private int itemsPerPage = 15;

    protected override async Task OnInitializedAsync()
    {
        posts = await Http.GetFromJsonAsync<List<Post>>("https://jsonplaceholder.typicode.com/posts");
        _filteredPosts = posts;
        LoadPageData(1);
    }

    private void UpdateFilteredPosts(string searchItem)
    {
        if (string.IsNullOrEmpty(searchItem))
        {
            _filteredPosts = posts.ToList();
        }
        else
        {
            _filteredPosts = posts
                .Where(post => post.title.Contains(searchItem, StringComparison.OrdinalIgnoreCase))
                .ToList();
        }

        LoadPageData(1);
    }

    private void LoadPageData(int currentPage)
    {
        int startIndex = (currentPage - 1) * itemsPerPage;
        _pagedPosts = _filteredPosts?.Skip(startIndex).Take(itemsPerPage).ToList();
    }
}
