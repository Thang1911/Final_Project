@using BlazorFE.Models
@using BlazorFE.Services

@inject FileUploadServices FileUploadServices
@inject GoogleDriveServices DriveService


<div>
    <InputFile OnChange="HandleFileSelected" />
    <button @onclick="HandleUploadFile" disabled="@(!isFileSelected || isFileUploading)" class="btn btn-primary">
        @if (isFileUploading)
        {
            <span>
                <div class="spinner-border spinner-border-sm" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
                Đang tải...
            </span>
        }
        else
        {
            <span>Tải</span>
        }
    </button>
</div>

@if (isFileUploading)
{
    <div class="mt-3">
        <div class="spinner-grow text-primary" role="status">
            <span class="visually-hidden">Đang tải...</span>
        </div>
        <p class="mt-2">File đang được tải lên, vui lòng chờ...</p>
    </div>
}

@code {
    [Parameter] public string relatedId { get; set; }
    [Parameter] public EventCallback OnSave { get; set; }

    private IBrowserFile selectedFile;
    private bool isFileSelected = false;
    private bool isFileUploading = false;
    private Models.File.File file { get; set; }

    private const string FolderId = "1hdkBV634KcqZH4Chkwk1d6sSoNt4Tu-G";

    private async Task HandleUploadFile()
    {
        if (selectedFile == null) return;

        try
        {
            isFileUploading = true;
            using var stream = selectedFile.OpenReadStream();
            var fileId = await DriveService.UploadFileAsync(stream, selectedFile.Name, FolderId);
            await DriveService.MakeFilePublicAsync(fileId);
            var publicUrl = $"https://drive.google.com/uc?id={fileId}";
            file.file_path = publicUrl;
            var result = await FileUploadServices.UploadFileAsync(file);
            if (result)
            {
                isFileSelected = false;
                isFileUploading = false;
                await OnSave.InvokeAsync();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error: {ex.Message}");
        }
    }

    private void HandleFileSelected(InputFileChangeEventArgs e)
    {
        try
        {
            selectedFile = e.File;
            isFileSelected = selectedFile != null;
            if (selectedFile != null)
            {
                file ??= new Models.File.File();

                file.original_name = selectedFile.Name;
                file.file_type = selectedFile.ContentType;
                file.related_id = relatedId;
                file.related_type = "ExampleType";
                file.created_at = DateTime.UtcNow;
                file.updated_at = DateTime.UtcNow;
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Lỗi khi chọn file: {ex.Message}");
        }
    }

}
