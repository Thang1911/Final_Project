@page "/User/Curriculums"
@rendermode InteractiveServer

@using System.Security.Claims;
@using BlazorFE.Models.Scientist;
@using BlazorFE.Components.Pages.User.Curriculums.Components
@using BlazorFE.Services;
@using BlazorFE.Services.Category;
@using BlazorFE.Enums;
@using System.ComponentModel.DataAnnotations;
@inject ScientistServices ProfileServices
@inject CurriculumServices CurriculumServices
@inject RoleServices RoleServices
@inject BookServices BookServices
@inject TrainingServices TrainingServices
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime

@if (scientist != null) {
    <h3>Danh sách giáo trình, sách tham khảo của @scientist.profile_name</h3>

    <div class="bg-white">
        <div class="justify-content-center">
            <div class="border-right d-flex flex-column gap-4">
                <div class="">
                    <button class="btn btn-success" @onclick="ToggleCurriculum">Thêm giáo trình, sách tham khảo</button>
                    @if (scientist != null && isAdd)
                    {
                        <CurriculumForm NewCurriculum="@curriculum" RoleId="@roleId" ListBooks="@books" ListTrainings="@trainings" IsReadOnly="@isReadOnly" showError="@showError" OnCancel="ToggleCurriculum" OnSave="SaveCurriculum" />
                    }

                </div>
                <TableCurriculum ListCurriculums="@curriculums" OnEdit="UpdateCurriculum" OnDelete="DeleteCurriculum" />
                <div>
                    <h3>Danh sách yêu cầu tham gia:</h3>
                    <table class="table table-striped table-hover">
                        <thead>
                            <tr>
                                <th scope="col">#</th>
                                <th scope="col">Tên giáo trình</th>
                                <th scope="col">Loại sách</th>
                                <th scope="col">Người yêu cầu</th>
                                <th scope="col">Vai trò</th>
                                <th scope="col">Thao tác</th>
                            </tr>
                        </thead>
                        <tbody>
                            @if (RequestCurriculums != null && RequestCurriculums.Count > 0)
                            {
                                int i = 1;
                                foreach (var item in RequestCurriculums)
                                {
                                    <tr>
                                        <th scope="row">@i</th>
                                        <td>@item?.Curriculums?.name</td>
                                        <td>@item?.Curriculums?.Book?.book_name</td>
                                        <td>@item?.Scientist?.profile_name</td>
                                        <td>@item?.Role?.role_name</td>
                                        <td>
                                            <button class="btn btn-warning" @onclick="() => UpdateRequest(item, true)">Duyệt</button>
                                            <button class="btn btn-danger" @onclick="() => UpdateRequest(item, false)">Từ chối</button>
                                        </td>
                                    </tr>
                                    i++;
                                }
                            }
                            else
                            {
                                <tr>
                                    <td colspan="8" class="text-center">Không có yêu cầu tham gia</td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    </div>
}
<style>
    .auto-cols {
        display: flex;
        flex-direction: row;
        width: 100%;
        gap: 16px;
        justify-content: space-between;
    }

    .auto-cols > div {
        flex: 1;
        min-width: 200px;
    }

    .d-flex {
        display: flex;
        flex-direction: row;
        justify-content: right;
    }

    .text-red {
        color: red;
    }
</style>

@code {
    private bool isReadOnly = true;
    private bool showError = false;
    private bool isUpdate = false;
    private bool isAdd = false;
    private string userName = "";
    private string userid = "";
    private string roleId = "";
    private List<Models.Category.Role> roles { get; set; }
    private List<Models.Category.Book> books { get; set; }
    private List<Models.Category.Training> trainings { get; set; }
    private Scientist scientist { get; set; }
    private Models.Curriculum.Curriculums curriculum { get; set; }
    private List<ScientistCurriculumRole> curriculums { get; set; }
    private List<ScientistCurriculumRole> RequestCurriculums { get; set; }
    private List<string> ListCurriculumIds { get; set; }

    private void EditCurriculum(Models.Curriculum.Curriculums editCurriculum)
    {
        isAdd = true;
        isReadOnly = false;
        curriculum = editCurriculum;
        isUpdate = true;
    }

    private void ToggleCurriculum()
    {
        isAdd = !isAdd;
        isReadOnly = !isReadOnly;
        curriculum = new Models.Curriculum.Curriculums();
    }

    private void JoinCurriculum()
    {
        NavigationManager.NavigateTo("/User/JoinCurriculums");
    }

    private async Task SaveCurriculum()
    {
        if (isUpdate)
        {
            await UpdateCurriculum();
        }
        else
        {
            await AddNewScientistCurriculum();
        }
    }

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var principal = authState.User;
        if (principal.Identity?.IsAuthenticated == true)
        {
            userid = principal.FindFirst(ClaimTypes.NameIdentifier)?.Value.ToString();
            userName = principal.Identity.Name;

            if (userid != null && userName != null)
            {
                var response = await ProfileServices.GetProfileAsync(userid);
                if (response != null)
                {
                    scientist = response;
                    curriculums = await CurriculumServices.GetCurriculumsByScientistIdAsync(scientist.id);
                    if (curriculums != null && curriculums.Any())
                    {
                        ListCurriculumIds = curriculums
                            .Where(topic => topic.Role != null && topic.Role.role_name == "Tác giả")
                            .Select(curriculum => curriculum.id)
                            .ToList();
                        RequestCurriculums = await CurriculumServices.GetJoinRequestsByScientistIdAsync(scientist.id, ListCurriculumIds);
                    }
                    books = await BookServices.GetListBook();
                    trainings = await TrainingServices.GetListTraining();
                    roles = await RoleServices.GetListRole(RoleType.curriculum.ToString());
                    var role = roles.FirstOrDefault(role => role.role_name == "Tác giả" && role.role_type == RoleType.curriculum.ToString());

                    if (role != null)
                    {
                        roleId = role.id;
                    }
                    else
                    {
                        Console.WriteLine("Role not found");
                    }
                }
            }
            else
            {
                NavigationManager.NavigateTo("Account/Login");
            }
        }
        else
        {
            NavigationManager.NavigateTo("Account/Login");
        }
    }

    private async Task AddNewScientistCurriculum()
    {
        try
        {
            if (curriculum == null || string.IsNullOrWhiteSpace(curriculum.name))
            {
                showError = true;
                return;
            }

            showError = false;

            if (scientist == null || string.IsNullOrEmpty(scientist.id) || string.IsNullOrEmpty(roleId))
            {
                throw new InvalidOperationException("Scientist or role information is missing.");
            }

            curriculum.id = Guid.NewGuid().ToString();
            curriculum.created_at = DateTime.Now;
            curriculum.updated_at = DateTime.Now;

            var result = await CurriculumServices.AddCurriculumAndLinkToScientistAsync(curriculum, scientist.id, roleId, false);
            if (result)
            {
                curriculums = await CurriculumServices.GetCurriculumsByScientistIdAsync(scientist.id);
            }

            isAdd = false;
            isReadOnly = true;
            curriculum = null;
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"An error occurred: {ex.Message}");
        }
    }

    private async Task UpdateCurriculum()
    {
        try
        {
            if (curriculum == null || string.IsNullOrWhiteSpace(curriculum.name))
            {
                showError = true;
                return;
            }

            showError = false;

            if (scientist == null || string.IsNullOrEmpty(scientist.id) || string.IsNullOrEmpty(roleId))
            {
                throw new InvalidOperationException("Scientist or role information is missing.");
            }

            var result = await CurriculumServices.UpdateCurriculumAndLinkToScientistAsync(curriculum.id, curriculum, scientist.id, roleId, null, false);
            if (result)
            {
                curriculums = await CurriculumServices.GetCurriculumsByScientistIdAsync(scientist.id);
            }

            isAdd = false;
            isReadOnly = true;
            curriculum = null;
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"An error occurred: {ex.Message}");
        }
    }

    private async Task DeleteCurriculum(Models.Curriculum.Curriculums deleteCurriculum)
    {
        try
        {
            var confirm = await JSRuntime.InvokeAsync<bool>("confirm", new object[] { "Bạn có chắc muốn xóa giáo trình này?" });

            if (confirm)
            {
                var result = await CurriculumServices.DeleteCurriculumAndLinkFromScientistAsync(deleteCurriculum.id, scientist.id);
                if (result)
                {
                    curriculums = await CurriculumServices.GetCurriculumsByScientistIdAsync(scientist.id);
                }
            }
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"An error occurred while deleting: {ex.Message}");
        }
    }

    private async Task UpdateRequest(ScientistCurriculumRole requestCurriculum, bool isAccept)
    {
        try
        {
            var confirm = await JSRuntime.InvokeAsync<bool>("confirm", new object[] { isAccept ? "Bạn có chắc muốn duyệt yêu cầu này?" : "Bạn có chắc muốn từ chối yêu cầu này?" });

            if (confirm && !string.IsNullOrWhiteSpace(requestCurriculum?.Curriculums?.id) && !string.IsNullOrWhiteSpace(requestCurriculum?.Scientist?.id) && !string.IsNullOrWhiteSpace(requestCurriculum?.Role?.id))
            {
                var result = await CurriculumServices.UpdateCurriculumAndLinkToScientistAsync(requestCurriculum.Curriculums.id, requestCurriculum.Curriculums, requestCurriculum.Scientist.id, requestCurriculum.Role.id, isAccept ? "Đã tham gia" : "Từ chối", true);
                if (result)
                {
                    ListCurriculumIds = curriculums.Select(curriculum => curriculum.id).ToList();
                    RequestCurriculums = await CurriculumServices.GetJoinRequestsByScientistIdAsync(scientist.id, ListCurriculumIds);
                }
            }
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"An error occurred while deleting: {ex.Message}");
        }
    }
}

