@page "/User/Curriculums"
@rendermode InteractiveServer

@using Microsoft.AspNetCore.Authorization;

@attribute [Authorize(Roles = "User")]

@using System.Security.Claims;
@using BlazorFE.Models.Scientist;
@using BlazorFE.Components.Pages.User.Curriculums.Components
@using BlazorFE.Services;
@using BlazorFE.Services.Category;
@using BlazorFE.Enums;
@using System.ComponentModel.DataAnnotations;

@inject ScientistServices ProfileServices
@inject CurriculumServices CurriculumServices
@inject RoleServices RoleServices
@inject BookServices BookServices
@inject TrainingServices TrainingServices
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
@inject IToastService toastService

@if (scientist != null) {
    <div class="bg-white">
        <div class="justify-content-center">
            <div class="border-right d-flex flex-column gap-4">
                <div class="card shadow rounded">
                    <div class="p-3 d-flex flex-column gap-3">
                        <div class="d-flex justify-content-between">
                            <h3>Danh sách giáo trình, sách tham khảo của @scientist.profile_name</h3>
                            <button class="btn btn-success" @onclick="ToggleCurriculum">Thêm giáo trình, sách tham khảo</button>
                        </div>
                        @if (scientist != null && isAdd)
                        {
                            <CurriculumForm NewCurriculum="@curriculum" ListBooks="@books" ListTrainings="@trainings" IsReadOnly="@isReadOnly" showError="@showError" OnCancel="ToggleCurriculum" OnSave="SaveCurriculum" roleId="@roleId" roles="@roles" />
                        }
                        <TableCurriculum ListCurriculums="@curriculums" OnEdit="EditCurriculum" OnDelete="DeleteCurriculum" />
                    </div>
                </div>
            </div>
        </div>
    </div>
}
<style>
    .auto-cols {
        display: flex;
        flex-direction: row;
        width: 100%;
        gap: 16px;
        justify-content: space-between;
    }

    .auto-cols > div {
        flex: 1;
        min-width: 200px;
    }

    .d-flex {
        display: flex;
        flex-direction: row;
        justify-content: right;
    }

    .text-red {
        color: red;
    }
</style>

@code {
    private bool isReadOnly = true;
    private bool showError = false;
    private bool isUpdate = false;
    private bool isAdd = false;
    private string userName = "";
    private string userid = "";
    private string roleId = "";
    private List<Models.Category.Role> roles { get; set; }
    private List<Models.Category.Book> books { get; set; }
    private List<Models.Category.Training> trainings { get; set; }
    private Scientist scientist { get; set; }
    private Models.Curriculum.Curriculums curriculum { get; set; }
    private List<ScientistCurriculumRole> curriculums { get; set; }
    private List<ScientistCurriculumRole> RequestCurriculums { get; set; }
    private List<string> ListCurriculumIds { get; set; }

    private void EditCurriculum(Models.Curriculum.Curriculums editCurriculum)
    {
        NavigationManager.NavigateTo($"/User/Curriculum/Edit/{editCurriculum.id}");
    }

    private void ToggleCurriculum()
    {
        isAdd = !isAdd;
        isReadOnly = !isReadOnly;
        curriculum = new Models.Curriculum.Curriculums();
    }
    private void Reload()
    {
        NavigationManager.NavigateTo(NavigationManager.Uri, forceLoad: true);
    }


    private async Task SaveCurriculum()
    {
        await AddNewScientistCurriculum();
    }

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var principal = authState.User;
        if (principal.Identity?.IsAuthenticated == true)
        {
            userid = principal.FindFirst(ClaimTypes.NameIdentifier)?.Value.ToString();
            userName = principal.Identity.Name;

            if (userid != null && userName != null)
            {
                var response = await ProfileServices.GetProfileAsync(userid);
                if (response != null)
                {
                    scientist = response;
                    curriculums = await CurriculumServices.GetCurriculumsByScientistIdAsync(scientist.id);
                    books = await BookServices.GetListBook();
                    trainings = await TrainingServices.GetListTraining();
                    roles = await RoleServices.GetListRole(RoleType.curriculum.ToString());
                }
            }
            else
            {
                NavigationManager.NavigateTo("Account/Login");
            }
        }
        else
        {
            NavigationManager.NavigateTo("Account/Login");
        }
    }

    private async Task AddNewScientistCurriculum()
    {
        try
        {
            showError = true;

            curriculum.id = Guid.NewGuid().ToString();
            curriculum.created_at = DateTime.Now;
            curriculum.updated_at = DateTime.Now;

            var result = await CurriculumServices.AddCurriculumAndLinkToScientistAsync(curriculum, scientist.id, roleId, false, false);
            if (result)
            {
                toastService.ShowSuccess("Thành công!");
                await Task.Delay(3000);
                Reload();
            }
            else
            {
                toastService.ShowError("Thất bại!");
            }

            isAdd = false;
            isReadOnly = true;
            curriculum = null;
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"An error occurred: {ex.Message}");
        }
    }

    private async Task DeleteCurriculum(Models.Curriculum.Curriculums deleteCurriculum)
    {
        try
        {
            var confirm = await JSRuntime.InvokeAsync<bool>("confirm", new object[] { "Bạn có chắc muốn xóa giáo trình này?" });

            if (confirm)
            {
                var result = await CurriculumServices.DeleteCurriculumAndLinkFromScientistAsync(deleteCurriculum.id, scientist.id);
                if (result)
                {
                    curriculums = await CurriculumServices.GetCurriculumsByScientistIdAsync(scientist.id);
                }
            }
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"An error occurred while deleting: {ex.Message}");
        }
    }
}

