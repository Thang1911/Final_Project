@page "/User/JoinOffers"

@rendermode InteractiveServer

@using System.Security.Claims;
@using BlazorFE.Models.Scientist
@using BlazorFE.Services;
@using BlazorFE.Enums;
@using System.ComponentModel.DataAnnotations;
@using BlazorFE.Services.Category;

@inject ScientistServices ProfileServices
@inject OfferServices OfferServices
@inject RoleServices RoleServices
@inject ProposeServices ProposeServices
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime

@if (scientist != null)
{
    <h3>Danh sách yêu cầu tham gia của @scientist.profile_name</h3>

    <div class="bg-white">
        <div class="justify-content-center">
            <div class="border-right">
                <div class="">
                    <div class="d-flex flex-row gap-2">
                        <button class="btn btn-warning" @onclick="Return">Quay lại</button>
                    </div>
                    @if (isJoining && roles != null)
                    {
                        <form>
                            <div class="mt-2">
                                <!-- Hàng đầu tiên -->
                                <div class="auto-cols">
                                    <div>
                                        <label class="labels">Tên đề xuất<span class="text-red">*</span></label>
                                        <input readonly="true" type="text" class="form-control" placeholder="Tên đề xuất" @bind="@NewOffer.offer_name">
                                        @if (showError && string.IsNullOrWhiteSpace(NewOffer.offer_name))
                                        {
                                            <span class="text-danger">Vui lòng nhập tên đề xuất</span>
                                        }
                                    </div>
                                    <div>
                                        <label class="labels">Ghi chú <span class="text-gray">(Tùy chọn)</span></label>
                                        <input readonly="true" type="text" class="form-control" placeholder="Ghi chú" @bind="@NewOffer.note">
                                    </div>
                                </div>

                                <!-- Hàng thứ hai -->
                                <div class="auto-cols mt-2">
                                    <div>
                                        <label class="labels">Năm<span class="text-red">*</span></label>
                                        <select disabled="true" type="text" class="form-control" @bind="@NewOffer.year">
                                            <option value="0" selected>Chọn năm</option>
                                            @for (int year = DateTime.Now.Year; year >= 1900; year--)
                                            {
                                                <option value="@year">@year</option>
                                            }
                                        </select>
                                        @if (showError && NewOffer.year == 0)
                                        {
                                            <span class="text-danger">Vui lòng chọn năm.</span>
                                        }
                                    </div>
                                    <div>
                                        <label class="labels">Loại đề xuất<span class="text-red">*</span></label>
                                        <select disabled="true" type="text" class="form-control" @bind="@NewOffer.propose_id">
                                            <option value="">Chọn loại đề xuất</option>
                                            @foreach (var item in ListProposes)
                                            {
                                                <option value="@item.id">@item.propose_name</option>
                                            }
                                        </select>
                                        @if (showError && string.IsNullOrWhiteSpace(NewOffer.propose_id))
                                        {
                                            <span class="text-danger">Vui lòng chọn loại đề xuất.</span>
                                        }
                                    </div>
                                    <div>
                                        <label class="labels">Vai trò<span class="text-red">*</span></label>
                                        <select disabled="@IsReadOnly" class="form-control" @bind="@roleId">
                                            <option value="">Chọn vai trò</option>
                                            @foreach (var item in roles)
                                            {
                                                <option value="@item.id">@item.role_name</option>
                                            }
                                        </select>
                                        @if (showError && string.IsNullOrWhiteSpace(roleId))
                                        {
                                            <span class="text-danger">Vui lòng chọn vai trò.</span>
                                        }
                                    </div>
                                </div>
                            </div>

                            <div class="d-flex gap-1 mt-2">
                                <div class="mt-5 text-center">
                                    <button class="btn btn-primary" type="button" @onclick="Cancle">Hủy</button>
                                </div>
                                <div class="mt-5 text-center">
                                    <button class="btn btn-success" type="submit" @onclick="SaveRequest" @onclick:preventDefault>Tham gia</button>
                                </div>
                            </div>
                        </form>
                    }
                </div>
                <table class="table table-striped table-hover">
                    <thead>
                        <tr>
                            <th scope="col">#</th>
                            <th scope="col">Tên đề xuất</th>
                            <th scope="col">Năm</th>
                            <th scope="col">Loại đề xuất</th>
                            <th scope="col">Người đề xuất</th>
                            <th scope="col">Thao tác</th>
                        </tr>
                    </thead>
                    <tbody>
                        @if (ListOffers != null && ListOffers.Count > 0)
                        {
                            int i = 1;
                            foreach (var item in ListOffers)
                            {
                                <tr class="">
                                    <th scope="row">@i</th>
                                    <td>@item?.Offer?.offer_name</td>
                                    <td>@item?.Offer?.year</td>
                                    <td>@item?.Offer?.Propose?.propose_name</td>
                                    <td>@item?.Scientist?.profile_name</td>
                                    <td>
                                        @if (MyOffers.Any(myOffer => myOffer?.offer_id == item?.offer_id))
                                        {
                                            <button class="btn btn-secondary" disabled>
                                                @item?.requestStatus
                                            </button>
                                        }
                                        else
                                        {
                                            <button class="btn btn-primary" @onclick="() => JoiningOffer(item.Offer)">Tham gia</button>
                                        }
                                    </td>
                                </tr>
                                i++;
                            }
                        }
                        else
                        {
                            <tr>
                                <td colspan="7" class="text-center">Không có dữ liệu</td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
    </div>
}

<style>
    .auto-cols {
        display: flex;
        flex-direction: row;
        width: 100%;
        gap: 16px;
        justify-content: space-between;
    }

    .auto-cols > div {
        flex: 1;
        min-width: 200px;
    }

    .d-flex {
        display: flex;
        flex-direction: row;
        justify-content: right;
    }

    .text-red {
        color: red;
    }
</style>

@code {
    private bool IsReadOnly = true;
    private bool showError = false;
    private bool isJoining = false;
    private string userName = "";
    private string userid = "";
    private string roleId = "";
    private Models.Offer.Offers NewOffer { get; set; }
    private List<ScientistOfferRole> ListOffers { get; set; }
    private List<Models.Category.Role> roles { get; set; }
    private List<Models.Category.Propose> ListProposes { get; set; }
    private Scientist scientist { get; set; }
    private List<ScientistOfferRole> MyOffers { get; set; }

    private void JoiningOffer(Models.Offer.Offers joinOffer)
    {
        isJoining = true;
        IsReadOnly = false;
        NewOffer = joinOffer;
    }

    private void Cancle()
    {
        isJoining = !isJoining;
        IsReadOnly = false;
        NewOffer = new Models.Offer.Offers();
    }

    private void Return()
    {
        NavigationManager.NavigateTo("/User/Offers");
    }

    private async Task SaveRequest()
    {
        await CreateRequestJoinCurriculum();
    }

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var principal = authState.User;
        if (principal.Identity?.IsAuthenticated == true)
        {
            userid = principal.FindFirst(ClaimTypes.NameIdentifier)?.Value.ToString();
            userName = principal.Identity.Name;

            if (userid != null && userName != null)
            {
                var response = await ProfileServices.GetProfileAsync(userid);
                if (response != null)
                {
                    scientist = response;
                    MyOffers = await OfferServices.GetOffersByScientistIdAsync(scientist.id);
                    ListOffers = await OfferServices.GetRequesOfferAsync(scientist.id, true);
                    ListProposes = await ProposeServices.GetListPropose();
                    var result = await RoleServices.GetListRole(RoleType.topic.ToString());
                    roles = result.Where(role => role.role_name != "Chủ nhiệm dự án" && role.role_type == RoleType.topic.ToString()).ToList();
                }
            }
            else
            {
                NavigationManager.NavigateTo("Account/Login");
            }
        }
        else
        {
            NavigationManager.NavigateTo("Account/Login");
        }
    }

    private async Task CreateRequestJoinCurriculum()
    {
        try
        {
            if (NewOffer == null || string.IsNullOrWhiteSpace(NewOffer.offer_name))
            {
                showError = true;
                return;
            }

            showError = false;

            if (scientist == null || string.IsNullOrEmpty(scientist.id) || string.IsNullOrEmpty(roleId))
            {
                throw new InvalidOperationException("Scientist or role information is missing.");
            }

            var result = await OfferServices.AddOfferAndLinkToScientistAsync(NewOffer, scientist.id, roleId, true);
            if (result)
            {
                MyOffers = await OfferServices.GetOffersByScientistIdAsync(scientist.id);
                ListOffers = await OfferServices.GetRequesOfferAsync(scientist.id, true);
            }

            isJoining = false;
            IsReadOnly = true;
            NewOffer = new Models.Offer.Offers();
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"An error occurred: {ex.Message}");
        }
    }
}
