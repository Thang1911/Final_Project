@page "/User/Offers"
@rendermode InteractiveServer

@using Microsoft.AspNetCore.Authorization;

@attribute [Authorize(Roles = "User")]

@using System.Security.Claims;
@using BlazorFE.Models.Scientist;
@using BlazorFE.Components.Pages.User.Offers.Components
@using BlazorFE.Services;
@using BlazorFE.Enums;
@using System.ComponentModel.DataAnnotations;
@using BlazorFE.Services.Category;

@inject ScientistServices ProfileServices
@inject OfferServices OfferServices
@inject RoleServices RoleServices
@inject ProposeServices ProposeServices
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
@inject IToastService toastService

@if (scientist != null)
{
    <div class="bg-white mt-3">
        <div class="justify-content-center">
            <div class="card shadow rounded">
                <div class="p-3 d-flex flex-column gap-3">
                    <div>
                        <div class="d-flex justify-content-between">
                            <h3>Danh sách đề xuất của @scientist.profile_name</h3>
                            <button class="btn btn-success" @onclick="ToggleOffer">Thêm đề xuất</button>
                        </div>
                        @if (isAdd)
                        {
                            <OfferForm NewOffer="@offer" ListProposes="@proposes" IsReadOnly="@isReadOnly" showError="@showError" OnCancel="ToggleOffer" OnSave="SaveOffer" roleId="@roleId" roles="@roles" />
                        }

                    </div>
                    <ListOffersTable ListOffers="@offers" OnDelete="DeleteOffer" OnEdit="EditOffer" />
                </div>
            </div>
        </div>
    </div>
}
<style>
    .auto-cols {
        display: flex;
        flex-direction: row;
        width: 100%;
        gap: 16px;
        justify-content: space-between;
    }

        .auto-cols > div {
            flex: 1;
            min-width: 200px;
        }

    .d-flex {
        display: flex;
        flex-direction: row;
        justify-content: right;
    }

    .text-red {
        color: red;
    }

    .text-gray {
        color: #ccc;
        opacity: 0.8;
    }
</style>

@code {
    private bool isReadOnly = true;
    private bool showError = false;
    private bool isUpdate = false;
    private bool isAdd = false;
    private string userName = "";
    private string userid = "";
    private string roleId = "";
    private List<Models.Category.Role> roles { get; set; }
    private Scientist scientist { get; set; }
    private Models.Offer.Offers offer { get; set; }
    private List<ScientistOfferRole> offers { get; set; }
    private List<ScientistOfferRole> RequestOffers { get; set; }
    private List<string> ListOfferIds { get; set; }
    private List<Models.Category.Propose> proposes { get; set; }

    private void EditOffer(Models.Offer.Offers editOffer)
    {
        NavigationManager.NavigateTo($"/User/Offers/Edit/{editOffer.id}");
    }

    private void ToggleOffer()
    {
        isAdd = !isAdd;
        isReadOnly = !isReadOnly;
        offer = new Models.Offer.Offers();
    }

    private async Task SaveOffer()
    {
        await AddNewScientistOffer();
    }

    private void Reload()
    {
        NavigationManager.NavigateTo(NavigationManager.Uri, forceLoad: true);
    }

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var principal = authState.User;
        if (principal.Identity?.IsAuthenticated == true)
        {
            userid = principal.FindFirst(ClaimTypes.NameIdentifier)?.Value.ToString();
            userName = principal.Identity.Name;

            if (userid != null && userName != null)
            {
                var response = await ProfileServices.GetProfileAsync(userid);
                if (response != null)
                {
                    scientist = response;
                    offers = await OfferServices.GetOffersByScientistIdAsync(scientist.id);
                    proposes = await ProposeServices.GetListPropose();
                    roles = await RoleServices.GetListRole(RoleType.topic.ToString());
                }
            }
            else
            {
                NavigationManager.NavigateTo("Account/Login");
            }
        }
        else
        {
            NavigationManager.NavigateTo("Account/Login");
        }
    }

    private async Task AddNewScientistOffer()
    {
        try
        {
            if (offer == null || string.IsNullOrWhiteSpace(offer.offer_name))
            {
                showError = true;
                return;
            }

            showError = false;

            if (scientist == null || string.IsNullOrEmpty(scientist.id) || string.IsNullOrEmpty(roleId))
            {
                throw new InvalidOperationException("Scientist or role information is missing.");
            }

            offer.id = Guid.NewGuid().ToString();
            offer.status = "Chưa duyệt";
            offer.created_at = DateTime.Now;
            offer.updated_at = DateTime.Now;

            var result = await OfferServices.AddOfferAndLinkToScientistAsync(offer, scientist.id, roleId, false, false);
            if (result)
            {
                offers = await OfferServices.GetOffersByScientistIdAsync(scientist.id);
            }

            isAdd = false;
            isReadOnly = true;
            offer = new Models.Offer.Offers();
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"An error occurred: {ex.Message}");
        }
    }

    private async Task DeleteOffer(Models.Offer.Offers deleteOffer)
    {
        try
        {
            var confirm = await JSRuntime.InvokeAsync<bool>("confirm", new object[] { "Bạn có chắc muốn xóa đề xuất này?" });

            if (confirm)
            {
                var result = await OfferServices.DeleteOfferAndLinkFromScientistAsync(deleteOffer.id, scientist.id);
                if (result)
                {
                    toastService.ShowSuccess("Thành công!");
                    await Task.Delay(3000);
                    Reload();
                }
                else
                {
                    toastService.ShowError("Thất bại!");
                }
            }
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"An error occurred while deleting: {ex.Message}");
        }
    }
}

