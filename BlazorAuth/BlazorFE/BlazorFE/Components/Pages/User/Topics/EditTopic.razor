@page "/User/Topics/Edit/{TopicId}"
@rendermode InteractiveServer

@using System.Security.Claims;
@using BlazorFE.Models.Scientist
@using BlazorFE.Services;
@using BlazorFE.Enums;
@using System.ComponentModel.DataAnnotations;
@using BlazorFE.Components.Common
@using Helpers

@inject ScientistServices ProfileServices
@inject TopicServices TopicServices
@inject RoleServices RoleServices
@inject LvTopicServices LvTopicServices
@inject FileUploadServices FileUploadServices
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime


<div class="bg-white">
    <div class="justify-content-center">
        <div class="border-right">
            <div class="">
                @if (scientist != null && scientistTopic != null)
                {
                    <form>
                        <div class="d-flex flex-column gap-3">
                            <!-- Hàng đầu tiên -->
                            <div class="auto-cols mb-2">
                                <div>
                                    <label class="labels">Tên đề tài<span class="text-red">*</span></label>
                                    <input readonly="@IsReadOnly" type="text" class="form-control" placeholder="Tên đề tài" @bind="@scientistTopic.Topics.topic_name">
                                    @if (ShowError && string.IsNullOrWhiteSpace(scientistTopic.Topics.topic_name))
                                    {
                                        <span class="text-danger">Vui lòng nhập tên đề tài</span>
                                    }
                                </div>
                                <div>
                                    <label class="labels">Cấp độ đề tài<span class="text-red">*</span></label>
                                    <select disabled="@IsReadOnly" type="text" class="form-control" @bind="@scientistTopic.Topics.lvtopic_id">
                                        <option value="" class="text-gray">Chọn cấp độ đề tài</option>
                                        @foreach (var item in lvTopics)
                                        {
                                            <option value="@item.id">@item.lvtopic_name</option>
                                        }
                                    </select>
                                    @if (ShowError && string.IsNullOrWhiteSpace(scientistTopic.Topics.lvtopic_id))
                                    {
                                        <span class="text-danger">Vui lòng chọn cấp độ đề tài.</span>
                                    }
                                </div>
                                <div>
                                    <label class="labels">Kết quả đánh giá<span class="text-red">*</span></label>
                                    <select disabled="@IsReadOnly" type="text" class="form-control" @bind="scientistTopic.Topics.result" aria-label="Default select example">
                                        <option value="0">Chọn kết quả</option>
                                        @foreach (var option in Enum.GetValues<Result>())
                                        {
                                            <option value="@(option)">
                                                @Helpers.EnumHelper.GetEnumDisplayName(option)
                                            </option>
                                        }
                                    </select>

                                    @if (ShowError && scientistTopic.Topics.result == "")
                                    {
                                        <span class="text-danger">Vui lòng chọn kết quả.</span>
                                    }
                                </div>
                            </div>
                            <div class="auto-cols">

                                <div>
                                    <label class="labels">Ngày bắt đầu</label>
                                    <input readonly="@IsReadOnly" type="date" class="form-control" @bind="@scientistTopic.Topics.start_date">
                                </div>
                                <div>
                                    <label class="labels">Ngày kết thúc</label>
                                    <input readonly="@IsReadOnly" type="date" class="form-control" @bind="@scientistTopic.Topics.end_date">
                                </div>
                            </div>
                        </div>
                        <div class="d-flex gap-1 mt-2">
                            @if (isUpdate)
                            {
                                <div class="text-center">
                                    <button class="btn btn-success" type="submit" @onclick="SaveTopic" @onclick:preventDefault>Lưu</button>
                                </div>
                            }
                            else
                            {
                                <div class="text-center">
                                    <button class="btn btn-success" @onclick="ToggleUpdate" @onclick:preventDefault disabled="@(scientistTopic?.status ?? true)">Chỉnh sửa</button>
                                </div>
                            }
                            <div class="text-center">
                                <button class="btn btn-primary" type="button" @onclick="ToggleUpdate">Hủy</button>
                            </div>
                        </div>
                    </form>
                }
            </div>

            <h3 class="mt-2">Danh sách thành viên: </h3>

            <div class="d-flex gap-2 justify-content-end">
                <button class="btn btn-outline-primary" @onclick="AddMember" disabled="@(scientistTopic?.status ?? true)">Thêm thành viên</button>
            </div>

            @if (isAddMember)
            {
                <form>
                    <div class="auto-cols">
                        <div>
                            <label class="labels">Thành viên<span class="text-red">*</span></label>
                            <select disabled="@IsReadOnly" type="text" class="form-control" @bind="@ScientistId">
                                <option value="">Chọn thành viên</option>
                                @foreach (var item in scientists)
                                {
                                    if (!ListScientistIds.Contains(item.id))
                                    {
                                        <option value="@item.id">@item.profile_name</option>
                                    }
                                }
                            </select>
                            @if (ShowError && string.IsNullOrWhiteSpace(ScientistId))
                            {
                                <span class="text-danger">Vui lòng chọn thành viên.</span>
                            }
                        </div>
                        <div>
                            <label class="labels">Vai trò<span class="text-red">*</span></label>
                            <select disabled="@IsReadOnly" class="form-control" @bind="roleId">
                                <option value="" selected>Chọn vai trò</option>
                                @foreach (var item in roles)
                                {
                                    <option value="@item.id">@item.role_name</option>
                                }
                            </select>
                            @if (ShowError && string.IsNullOrWhiteSpace(roleId))
                            {
                                <span class="text-danger">Vui lòng chọn vai trò.</span>
                            }
                        </div>
                        <div>
                            <label class="labels">Quyền<span class="text-red">*</span></label>
                            <select disabled="@IsReadOnly" class="form-control" @onchange="OnPermissionChange">
                                <option value="">Chọn quyền</option>
                                <option value="false">Chỉnh sửa</option>
                                <option value="true">Đọc</option>
                            </select>

                            @if (ShowError && SelectedPermission == null)
                            {
                                <span class="text-danger">Vui lòng chọn quyền cho thành viên.</span>
                            }
                        </div>
                    </div>
                    <div class="d-flex gap-1 mt-2">
                        <div class="text-center">
                            <button class="btn btn-primary" type="button">Hủy</button>
                        </div>
                        <div class="text-center">
                            <button class="btn btn-success" type="submit" @onclick="CreateNewRequestTopic" @onclick:preventDefault>Lưu</button>
                        </div>
                    </div>
                </form>
            }

            <table class="table table-striped table-hover">
                <thead>
                    <tr>
                        <th scope="col">#</th>
                        <th scope="col">Tên thành viên</th>
                        <th scope="col">Vai trò</th>
                        <th scope="col">Quyền</th>
                        <th scope="col">Trạng thái</th>
                        <th scope="col">Thao tác</th>
                    </tr>
                </thead>
                <tbody>
                    @if (listScientistTopics != null && listScientistTopics.Count > 0)
                    {
                        int i = 1;
                        foreach (var item in listScientistTopics)
                        {
                            <tr>
                                <th scope="row">@i</th>
                                <td>@item?.Scientist?.profile_name</td>
                                <td>@item?.Role?.role_name</td>
                                <td>@(item?.status == true ? "Đọc" : "Chỉnh sửa")</td>
                                <td>@item?.requestStatus</td>
                                <td>
                                    <button class="btn btn-danger" @onclick="() => DeleteMagazine(item)" disabled="@(item?.status ?? true)">Xóa</button>
                                </td>
                            </tr>
                            i++;
                        }
                    }
                    else
                    {
                        <tr>
                            <td colspan="6" class="text-center">Không có dữ liệu</td>
                        </tr>
                    }
                </tbody>
            </table>

            <h3 class="mt-2">Danh sách tài liệu: </h3>

            <div class="d-flex gap-2 justify-content-end">
                <button class="btn btn-outline-primary" @onclick="ToggleUploadFile" disabled="@(scientistTopic?.status ?? true)">Thêm tài liệu</button>
            </div>
            @if (isUpload)
            {
                <UploadFile relatedId="@TopicId" OnSave="LoadFiles" />
            }
            <table class="table table-striped table-hover">
                <thead>
                    <tr>
                        <th scope="col">#</th>
                        <th scope="col">Tên tài liệu</th>
                        <th scope="col">Loại tài liệu</th>
                        <th scope="col">Thao tác</th>
                    </tr>
                </thead>
                <tbody>
                    @if (listFiles != null && listFiles.Count > 0)
                    {
                        int i = 1;
                        foreach (var item in listFiles)
                        {
                            <tr>
                                <th scope="row">@i</th>
                                <td>@item.original_name</td>
                                <td>@item.file_type</td>
                                <td>
                                    <button class="btn btn-outline-success" @onclick="() => DownloadFile(item.file_path)">Tải tệp đính kèm</button>
                                    <button class="btn btn-danger" @onclick="() => DeleteFile(item.id)">Xóa</button>
                                </td>
                            </tr>
                            i++;
                        }
                    }
                    else
                    {
                        <tr>
                            <td colspan="4" class="text-center">Không có dữ liệu</td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </div>
</div>

<style>
    .auto-cols {
        display: flex;
        flex-direction: row;
        width: 100%;
        gap: 16px;
        justify-content: space-between;
    }

        .auto-cols > div {
            flex: 1;
            min-width: 200px;
        }

    .d-flex {
        display: flex;
        flex-direction: row;
        justify-content: right;
    }

    .text-red {
        color: red;
    }
</style>

@code {
    [Parameter]
    public string TopicId { get; set; }

    private bool IsReadOnly = true;
    private bool isAddMember = false;
    private bool isUpload = false;
    private bool ShowError = false;
    private bool isUpdate = false;
    private string ScientistId { get; set; }
    private string userName = "";
    private string userid = "";
    private string roleId = "";
    private bool? SelectedPermission { get; set; }
    private List<Models.Category.Role> roles { get; set; }
    private List<Models.Category.LvTopics> lvTopics { get; set; }
    private Scientist scientist { get; set; }
    private scientist_topic_role scientistTopic { get; set; }
    private List<scientist_topic_role> requestTopics { get; set; }
    private List<scientist_topic_role> listScientistTopics { get; set; }
    private List<string> ListTopicIds { get; set; }
    private List<string> ListScientistIds { get; set; }
    private List<Scientist> scientists { get; set; }
    private List<Models.File.File> listFiles { get; set; }

    private const string FolderId = "1hdkBV634KcqZH4Chkwk1d6sSoNt4Tu-G";

    private void AddMember()
    {
        isAddMember = true;
        IsReadOnly = false;
        ListScientistIds = listScientistTopics.Select(x => x.scientist_id).ToList();
    }

    private void ToggleUploadFile()
    {
        isUpload = !isUpload;
    }

    private void ToggleUpdate()
    {
        isUpdate = !isUpdate;
        IsReadOnly = !IsReadOnly;
    }

    private async Task SaveTopic()
    {
        await UpdateTopic();
    }

    private async Task LoadFiles()
    {
        isUpload = false;
        listFiles = await FileUploadServices.GetFilesByRelatedIdAsync(TopicId);
    }

    private void OnPermissionChange(ChangeEventArgs e)
    {
        if (bool.TryParse(e.Value?.ToString(), out bool result))
        {
            SelectedPermission = result;
        }
        else
        {
            SelectedPermission = null;
        }
    }

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var principal = authState.User;
        if (principal.Identity?.IsAuthenticated == true)
        {
            userid = principal.FindFirst(ClaimTypes.NameIdentifier)?.Value.ToString();
            userName = principal.Identity.Name;

            if (userid != null && userName != null)
            {
                var response = await ProfileServices.GetProfileAsync(userid);
                if (response != null)
                {
                    scientist = response;
                    scientists = await ProfileServices.GetAllScientistIdAsync();
                    scientistTopic = await TopicServices.GetScientistTopicByIdAsync(TopicId, scientist.id);
                    listScientistTopics = await TopicServices.GetListScientistByTopicIdAsync(TopicId);
                    lvTopics = await LvTopicServices.GetListLvTopics();
                    roles = await RoleServices.GetListRole(RoleType.magazine.ToString());
                    if (listScientistTopics.Count > 0)
                    {
                        roleId = listScientistTopics.FirstOrDefault(i => i.scientist_id == scientist.id).role_id;
                    }
                }
            }
            else
            {
                NavigationManager.NavigateTo("Account/Login");
            }
        }
        else
        {
            NavigationManager.NavigateTo("Account/Login");
        }
    }

    private async Task CreateNewRequestTopic()
    {
        try
        {
            if (string.IsNullOrWhiteSpace(scientistTopic.id))
            {
                ShowError = true;
                return;
            }

            ShowError = false;

            if (string.IsNullOrEmpty(ScientistId) || string.IsNullOrEmpty(roleId))
            {
                throw new InvalidOperationException("Scientist or role information is missing.");
            }

            var result = await TopicServices.AddTopicAndLinkToScientistAsync(scientistTopic.Topics, ScientistId, roleId, true, SelectedPermission);
            if (result)
            {
                listScientistTopics = await TopicServices.GetListScientistByTopicIdAsync(TopicId);
            }

            IsReadOnly = true;
            isAddMember = false;
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"An error occurred: {ex.Message}");
        }
    }

    private async Task UpdateTopic()
    {
        try
        {
            if (string.IsNullOrWhiteSpace(scientistTopic.id))
            {
                ShowError = true;
                return;
            }

            ShowError = false;

            if (scientist == null || string.IsNullOrEmpty(scientist.id))
            {
                throw new InvalidOperationException("Scientist information is missing.");
            }

            var result = await TopicServices.UpdateTopicAndLinkToScientistAsync(scientistTopic.topic_id, scientistTopic.Topics, scientist.id, roleId, null, false);
            if (result)
            {
                scientistTopic = await TopicServices.GetScientistTopicByIdAsync(TopicId, scientist.id);
            }

            IsReadOnly = true;
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"An error occurred: {ex.Message}");
        }
    }

    private async Task DeleteMagazine(scientist_topic_role str)
    {
        try
        {
            var confirm = await JSRuntime.InvokeAsync<bool>("confirm", new object[] { "Bạn có chắc muốn xóa thành viên này?" });

            if (confirm)
            {
                var result = await TopicServices.DeleteTopicAndLinkFromScientistAsync(str.topic_id, str.scientist_id);
            }
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"An error occurred while deleting: {ex.Message}");
        }
    }

    private async Task DownloadFile(string filePath)
    {
        if (!string.IsNullOrEmpty(filePath))
        {
            await JSRuntime.InvokeVoidAsync("window.open", filePath, "_blank");
        }
    }

    private async Task DeleteFile(string fileId)
    {
        var confirmDelete = await JSRuntime.InvokeAsync<bool>("confirm", "Bạn có chắc chắn muốn xóa tệp này?");
        if (confirmDelete)
        {
            var isDeleted = await FileUploadServices.DeleteFileAsync(fileId, FolderId);
            if (isDeleted)
            {
                LoadFiles();
                await JSRuntime.InvokeVoidAsync("alert", "Xóa tệp thành công!");
                StateHasChanged();
            }
            else
            {
                await JSRuntime.InvokeVoidAsync("alert", "Không thể xóa tệp. Vui lòng thử lại.");
            }
        }
    }

}

