@page "/User/Topics/Edit/{TopicId}"
@rendermode InteractiveServer

@using Microsoft.AspNetCore.Authorization;

@attribute [Authorize(Roles="User")]

@using System.Security.Claims;
@using BlazorFE.Models.Scientist
@using BlazorFE.Services;
@using BlazorFE.Enums;
@using System.ComponentModel.DataAnnotations;
@using BlazorFE.Components.Common
@using Helpers

@inject ScientistServices ProfileServices
@inject TopicServices TopicServices
@inject RoleServices RoleServices
@inject LvTopicServices LvTopicServices
@inject FileUploadServices FileUploadServices
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
@inject IToastService toastService


<div class="bg-white">
    <div class="justify-content-center">
        <div class="border-right">
            <div class="mb-4">
                @if (scientist != null && scientistTopic != null && scientistTopic?.Topics != null)
                {
                    <div class="card shadow rounded">
                        <div class="p-3">
                            <form>
                                <div class="d-flex flex-column gap-3">
                                    <!-- Hàng đầu tiên -->
                                    <div class="auto-cols mb-2">
                                        <div>
                                            <label class="labels">Tên đề tài<span class="text-red">*</span></label>
                                            <input disabled="@IsReadOnly" type="text" class="form-control" placeholder="Tên đề tài" @bind="@scientistTopic.Topics.topic_name">
                                            @if (ShowError && string.IsNullOrWhiteSpace(scientistTopic.Topics.topic_name))
                                            {
                                                <span class="text-danger">Vui lòng nhập tên đề tài</span>
                                            }
                                        </div>
                                        <div>
                                            <label class="labels">Cấp độ đề tài<span class="text-red">*</span></label>
                                            <select disabled="@IsReadOnly" type="text" class="form-control" @bind="@scientistTopic.Topics.lvtopic_id">
                                                <option value="" class="text-gray">Chọn cấp độ đề tài</option>
                                                @foreach (var item in lvTopics)
                                                {
                                                    <option value="@item.id">@item.lvtopic_name</option>
                                                }
                                            </select>
                                            @if (ShowError && string.IsNullOrWhiteSpace(scientistTopic.Topics.lvtopic_id))
                                            {
                                                <span class="text-danger">Vui lòng chọn cấp độ đề tài.</span>
                                            }
                                        </div>
                                        <div>
                                            <label class="labels">Kết quả đánh giá<span class="text-red">*</span></label>
                                            <select disabled="@IsReadOnly" type="text" class="form-control" @bind="scientistTopic.Topics.result" aria-label="Default select example">
                                                <option value="0">Chọn kết quả</option>
                                                @foreach (var option in Enum.GetValues<Result>())
                                                {
                                                    <option value="@(option)">
                                                        @Helpers.EnumHelper.GetEnumDisplayName(option)
                                                    </option>
                                                }
                                            </select>

                                            @if (ShowError && scientistTopic.Topics.result == "")
                                            {
                                                <span class="text-danger">Vui lòng chọn kết quả.</span>
                                            }
                                        </div>
                                    </div>
                                    <div class="auto-cols">

                                        <div>
                                            <label class="labels">Ngày bắt đầu</label>
                                            <input disabled="@IsReadOnly" type="date" class="form-control" @bind="@scientistTopic.Topics.start_date">
                                        </div>
                                        <div>
                                            <label class="labels">Ngày kết thúc</label>
                                            <input disabled="@IsReadOnly" type="date" class="form-control" @bind="@scientistTopic.Topics.end_date">
                                        </div>
                                    </div>
                                </div>
                                <div class="d-flex gap-1 mt-2">
                                    @if (isUpdate)
                                    {
                                        <div class="text-center">
                                            <button class="btn btn-success" type="submit" @onclick="SaveTopic" @onclick:preventDefault>Lưu</button>
                                        </div>
                                    }
                                    else
                                    {
                                        <div class="text-center">
                                            <button class="btn btn-success" @onclick="ToggleUpdate" @onclick:preventDefault disabled="@(scientistTopic?.status ?? true)">Chỉnh sửa</button>
                                        </div>
                                    }
                                    <div class="text-center">
                                        <button class="btn btn-primary" type="button" @onclick="Reload">Hủy</button>
                                    </div>
                                </div>
                            </form>
                        </div>
                    </div>
                }
            </div>

           
            <div class="card shadow rounded my-4">
                <div class="p-3">
                    <div class="d-flex gap-2 justify-content-between mb-2">
                        <h3 class="">Danh sách thành viên: </h3>
                        <button class="btn btn-outline-primary" @onclick="AddMember" disabled="@(scientistTopic?.status ?? true)">Thêm thành viên</button>
                    </div>

                    @if (isAddMember || isUpdateMember)
                    {
                        <form class="mb-3">
                            <div class="auto-cols">
                                <div>
                                    <label class="labels">Thành viên<span class="text-red">*</span></label>
                                    <AutoComplete @bind-Value="ScientistName"
                                                  TItem="Scientist"
                                                  DataProvider="ScientistsDataProvider"
                                                  PropertyName="profile_name"
                                                  Placeholder="Tên thành viên"
                                                  OnChanged="(Scientist scientist) => OnAutoCompleteChanged(scientist)" />
                                    @if (ShowError && string.IsNullOrWhiteSpace(ScientistId))
                                    {
                                        <span class="text-danger">Vui lòng chọn thành viên.</span>
                                    }
                                </div>
                                <div>
                                    <label class="labels">Vai trò<span class="text-red">*</span></label>
                                    <select disabled="@MemberReadOnly" class="form-control" @bind="roleId">
                                        <option value="" selected>Chọn vai trò</option>
                                        @foreach (var item in roles)
                                        {
                                            <option value="@item.id">@item.role_name</option>
                                        }
                                    </select>
                                    @if (ShowError && string.IsNullOrWhiteSpace(roleId))
                                    {
                                        <span class="text-danger">Vui lòng chọn vai trò.</span>
                                    }
                                </div>
                                <div>
                                    <label class="labels">Quyền<span class="text-red">*</span></label>
                                    <select disabled="@MemberReadOnly" class="form-control" @onchange="OnPermissionChange">
                                        <option value="">Chọn quyền</option>
                                        <option value="false">Chỉnh sửa</option>
                                        <option value="true">Đọc</option>
                                    </select>

                                    @if (ShowError && SelectedPermission == null)
                                    {
                                        <span class="text-danger">Vui lòng chọn quyền cho thành viên.</span>
                                    }
                                </div>
                            </div>
                            <div class="d-flex gap-1 my-2">
                                <div class="text-center">
                                    <button class="btn btn-primary" type="button" @onclick="Cancel">Hủy</button>
                                </div>
                                <div class="text-center">
                                    <button class="btn btn-success" type="submit" @onclick="SaveMember" @onclick:preventDefault>Lưu</button>
                                </div>
                            </div>
                        </form>
                    }
                    <DataTable Searchable="true">
                        <table class="table table-striped table-hover">
                            <thead>
                                <tr>
                                    <th scope="col">#</th>
                                    <th scope="col">Tên thành viên</th>
                                    <th scope="col">Vai trò</th>
                                    <th scope="col">Quyền</th>
                                    <th scope="col">Trạng thái</th>
                                    <th scope="col">Thao tác</th>
                                </tr>
                            </thead>
                            <tbody>
                                @if (listScientistTopics != null && listScientistTopics.Count > 0)
                                {
                                    int i = 1;
                                    foreach (var item in listScientistTopics)
                                    {
                                        <tr>
                                            <th scope="row">@i</th>
                                            <td>@item?.Scientist?.profile_name</td>
                                            <td>@item?.Role?.role_name</td>
                                            <td>@(item?.status == true ? "Đọc" : "Chỉnh sửa")</td>
                                            <td>@item?.requestStatus</td>
                                            <td>
                                                <button class="btn btn-info" @onclick="() => UpdateMember(item)" disabled="@(scientistTopic?.status ?? true)"><div class="bi-pencil-square-custom" style="width: 20px; height: 20px;"></div></button>
                                                <button class="btn btn-danger" @onclick="() => DeleteTopic(item)" disabled="@(scientistTopic?.status ?? true)"><div class="bi-trash-custom" style="width: 20px; height: 20px;"></div></button>
                                            </td>
                                        </tr>
                                        i++;
                                    }
                                }
                            </tbody>
                        </table>
                    </DataTable>
                </div>
            </div>

            <div class="card shadow my-4 rounded">
                <div class="p-3">
                    <div class="d-flex gap-2 justify-content-between">
                        <h3 class="">Danh sách tài liệu: </h3>
                        <button class="btn btn-outline-primary" @onclick="ToggleUploadFile" disabled="@(scientistTopic?.status ?? true)">Thêm tài liệu</button>
                    </div>
                    @if (isUpload)
                    {
                        <UploadFile relatedId="@TopicId" OnSave="LoadFiles" />
                    }
                    <DataTable Searchable="false">
                        <table class="table table-striped table-hover">
                            <thead>
                                <tr>
                                    <th scope="col">#</th>
                                    <th scope="col">Tên tài liệu</th>
                                    <th scope="col">Loại tài liệu</th>
                                    <th scope="col">Thao tác</th>
                                </tr>
                            </thead>
                            <tbody>
                                @if (listFiles != null && listFiles.Count > 0)
                                {
                                    int i = 1;
                                    foreach (var item in listFiles)
                                    {
                                        <tr>
                                            <th scope="row">@i</th>
                                            <td>@item.original_name</td>
                                            <td>@item.file_type</td>
                                            <td>
                                                <button class="btn btn-success" @onclick="() => DownloadFile(item)"><div class="bi-download-custom" style="width: 20px; height: 20px;"></div></button>
                                                <button class="btn btn-danger" disabled="@(scientistTopic?.status ?? true)" @onclick="() => DeleteFile(item.id)"><div class="bi-trash-custom" style="width: 20px; height: 20px;"></div></button>
                                            </td>
                                        </tr>
                                        i++;
                                    }
                                }
                            </tbody>
                        </table>
                    </DataTable>
                </div>
            </div>
        </div>
    </div>
</div>

<style>
    .auto-cols {
        display: flex;
        flex-direction: row;
        width: 100%;
        gap: 16px;
        justify-content: space-between;
    }

        .auto-cols > div {
            flex: 1;
            min-width: 200px;
        }

    .d-flex {
        display: flex;
        flex-direction: row;
        justify-content: right;
    }

    .text-red {
        color: red;
    }
</style>

@code {
    [Parameter]
    public string TopicId { get; set; }

    private bool IsReadOnly = true;
    private bool MemberReadOnly = true;
    private bool isAddMember = false;
    private bool isUpdateMember = false;
    private bool isUpload = false;
    private bool ShowError = false;
    private bool isUpdate = false;
    private string ScientistId { get; set; } = "";
    private string ScientistName { get; set; } = "";
    private string userName = "";
    private string userid = "";
    private string roleId = "";
    private bool? SelectedPermission { get; set; }
    private List<Models.Category.Role> roles { get; set; } = new();
    private List<Models.Category.LvTopics> lvTopics { get; set; } = new();
    private Scientist scientist { get; set; } = new();
    private scientist_topic_role scientistTopic { get; set; } = new();
    private List<scientist_topic_role> requestTopics { get; set; } = new();
    private List<scientist_topic_role> listScientistTopics { get; set; } = new();
    private List<string> ListTopicIds { get; set; } = new();
    private List<string> ListScientistIds { get; set; } = new();
    private List<Scientist> scientists { get; set; } = new();
    private List<Models.File.File> listFiles { get; set; } = new();

    private void AddMember()
    {
        isAddMember = true;
        MemberReadOnly = false;
    }

    private void ToggleUploadFile()
    {
        isUpload = !isUpload;
    }

    private void ToggleUpdate()
    {
        isUpdate = !isUpdate;
        IsReadOnly = !IsReadOnly;
    }

    private void UpdateMember(scientist_topic_role editScientist)
    {
        isUpdateMember = true;
        MemberReadOnly = false;
        ScientistId = editScientist.scientist_id;
        ScientistName = editScientist.Scientist.profile_name;
        roleId = editScientist.role_id;
        SelectedPermission = editScientist.status;
    }

    private async Task SaveMember()
    {
        if (isUpdateMember)
        {
            await UpdateMemberTopic();
        }
        else
        {
            await CreateNewRequest();
        }
    }

    private void Cancel()
    {
        isAddMember = false;
        isUpdateMember = false;
        MemberReadOnly = true;
        ScientistId = "";
        ScientistName = "";
        roleId = "";
    }

    private async Task SaveTopic()
    {
        await UpdateTopic();
    }

    private async Task LoadFiles()
    {
        isUpload = false;
        listFiles = await FileUploadServices.GetFilesByRelatedIdAsync(TopicId);
        NavigationManager.NavigateTo(NavigationManager.Uri, forceLoad: true);
    }

    private void Reload()
    {
        NavigationManager.NavigateTo(NavigationManager.Uri, forceLoad: true);
    }

    private void OnPermissionChange(ChangeEventArgs e)
    {
        if (bool.TryParse(e.Value?.ToString(), out bool result))
        {
            SelectedPermission = result;
        }
        else
        {
            SelectedPermission = null;
        }
    }

    private void OnAutoCompleteChanged(Scientist selectedScientist)
    {
        if (selectedScientist != null)
        {
            ScientistName = selectedScientist.profile_name;
            ScientistId = selectedScientist.id;
        }
    }

    private async Task<AutoCompleteDataProviderResult<Scientist>> ScientistsDataProvider(AutoCompleteDataProviderRequest<Scientist> request)
    {
        if (scientists.Count == 0)
            scientists = await LoadScientists().ConfigureAwait(false);

        return await Task.FromResult(request.ApplyTo(scientists.OrderBy(customer => customer.profile_name)));
    }

    private async Task<List<Scientist>> LoadScientists()
    {
        var listScientist = await ProfileServices.GetAllScientistIdAsync();
        ListScientistIds = listScientistTopics.Select(x => x.scientist_id).ToList();

        return listScientist
            .Where(scientist => !ListScientistIds.Contains(scientist.id))
            .ToList();
    }

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var principal = authState.User;
        if (principal.Identity?.IsAuthenticated == true)
        {
            userid = principal.FindFirst(ClaimTypes.NameIdentifier)?.Value.ToString();
            userName = principal.Identity.Name;

            if (userid != null && userName != null)
            {
                var response = await ProfileServices.GetProfileAsync(userid);
                if (response != null)
                {
                    scientist = response;
                    scientists = await ProfileServices.GetAllScientistIdAsync();
                    scientistTopic = await TopicServices.GetScientistTopicByIdAsync(TopicId, scientist.id);
                    if(scientistTopic != null)
                    {
                        listScientistTopics = await TopicServices.GetListScientistByTopicIdAsync(TopicId);
                        lvTopics = await LvTopicServices.GetListLvTopics();
                        roles = await RoleServices.GetListRole(RoleType.topic.ToString());
                        listFiles = await FileUploadServices.GetFilesByRelatedIdAsync(TopicId);
                    } else
                    {
                        NavigationManager.NavigateTo("/User/Topics");
                    }
                }
            }
            else
            {
                NavigationManager.NavigateTo("Account/Login");
            }
        }
        else
        {
            NavigationManager.NavigateTo("Account/Login");
        }
    }

    private async Task CreateNewRequest()
    {
        try
        {
            if (string.IsNullOrWhiteSpace(scientistTopic.id))
            {
                ShowError = true;
                return;
            }

            if (string.IsNullOrEmpty(ScientistId) || string.IsNullOrEmpty(roleId))
            {
                ShowError = true;
                return;
                throw new InvalidOperationException("Scientist or role information is missing.");
            }

            ShowError = false;

            var result = await TopicServices.AddTopicAndLinkToScientistAsync(scientistTopic.Topics, ScientistId, roleId, true, SelectedPermission);
            if (result)
            {
                toastService.ShowSuccess("Thêm thành viên thành công!");
                await Task.Delay(3000);
                Reload();
            } else
            {
                toastService.ShowError("Thêm thành viên không thành công!");
            }

            IsReadOnly = true;
            isAddMember = false;
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"An error occurred: {ex.Message}");
        }
    }

    private async Task UpdateTopic()
    {
        try
        {
            ShowError = true;

            var result = await TopicServices.UpdateTopicAndLinkToScientistAsync(scientistTopic.topic_id, scientistTopic?.Topics, scientist.id, roleId, null, false);
            if (result)
            {
                toastService.ShowSuccess("Chỉnh sửa thông tin đề tài thành công!");
                scientistTopic = await TopicServices.GetScientistTopicByIdAsync(TopicId, scientist.id);
            } else
            {
                toastService.ShowError("Chỉnh sửa thông tin đề tài không thành công!");
            }

            isUpdate = false;
            IsReadOnly = true;
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"An error occurred: {ex.Message}");
        }
    }

    private async Task UpdateMemberTopic()
    {
        try
        {
            var result = await TopicServices.UpdateTopicAndLinkToScientistAsync(scientistTopic.topic_id, scientistTopic?.Topics, ScientistId, roleId, null, SelectedPermission);
            if (result)
            {
                toastService.ShowSuccess("Chỉnh sửa thông tin thành viên thành công!");
                await Task.Delay(3000);
                Reload();
            }
            else
            {
                toastService.ShowError("Chỉnh sửa thông tin thành viên không thành công!");
            }

            isUpdate = false;
            IsReadOnly = true;
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"An error occurred: {ex.Message}");
        }
    }

    private async Task DeleteTopic(scientist_topic_role str)
    {
        try
        {
            var confirm = await JSRuntime.InvokeAsync<bool>("confirm", new object[] { "Bạn có chắc muốn xóa thành viên này?" });

            if (confirm)
            {
                var result = await TopicServices.DeleteTopicAndLinkFromScientistAsync(str.topic_id, str.scientist_id);
                if(result)
                {
                    toastService.ShowSuccess("Xóa thành viên thành công!");
                    await Task.Delay(3000);

                    Reload();
                }
            }
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"An error occurred while deleting: {ex.Message}");
        }
    }

    private async Task DownloadFile(Models.File.File file)
    {
        if (file != null)
        {
            var fileName = file.original_name;
            var fileType = file.file_type;
            var fileContent = file.file_content;

            var base64Data = Convert.ToBase64String(fileContent);
            var fileUrl = $"data:{fileType};base64,{base64Data}";

            await JSRuntime.InvokeVoidAsync("downloadFile", fileUrl, fileName);
        }
    }

    private async Task DeleteFile(string fileId)
    {
        var confirmDelete = await JSRuntime.InvokeAsync<bool>("confirm", "Bạn có chắc chắn muốn xóa tệp này?");
        if (confirmDelete)
        {
            var isDeleted = await FileUploadServices.DeleteFileAsync(fileId);
            if (isDeleted)
            {
                toastService.ShowSuccess("Xoá tệp thành công!");
                await Task.Delay(3000);
                await LoadFiles();
            }
            else
            {
                toastService.ShowError("Xóa tệp không thành công!");
            }
        }
    }
}

