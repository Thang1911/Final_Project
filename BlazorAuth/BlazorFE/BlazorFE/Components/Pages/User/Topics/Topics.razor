@page "/User/Topics"
@rendermode InteractiveServer

@using Microsoft.AspNetCore.Authorization;

@attribute [Authorize(Roles = "User")]

@using System.Security.Claims;
@using BlazorFE.Components.Pages.User.Topics
@using BlazorFE.Components.Pages.User.Topics.Comp
@using BlazorFE.Models.Scientist
@using BlazorFE.Services;
@using BlazorFE.Enums;
@using System.ComponentModel.DataAnnotations;
@using BlazorFE.Services.Category;

@inject ScientistServices ProfileServices
@inject TopicServices TopicServices
@inject RoleServices RoleServices
@inject LvTopicServices LvTopicServices
@inject FileUploadServices FileUploadServices
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
@inject IToastService toastService

@if (scientist != null)
{
    <div class="bg-white">
        <div class="justify-content-center">
            <div class="border-right d-flex flex-column gap-4">
                <div class="card shadow rounded">
                    <div class="p-3 d-flex flex-column gap-3">
                        <div class="d-flex justify-content-between">
                            <h3>Danh sách đề tài của @scientist.profile_name</h3>
                            <button class="btn btn-primary" @onclick="ToggleTopics" disabled="@isAdd">Thêm đề tài</button>
                        </div>
                        @if (isAdd)
                        {
                           <CompTopicForm 
                                Topics="@topics"
                                roleId="@roleId"
                                roles="@roles"
                                IsReadOnly="@isReadOnly"
                                ShowError="@showError"
                                LvTopics="@lvTopics"
                                OnCancel="ToggleTopics"
                                OnSave="SaveTopic" 
                             />

                        }
                        <ListTopicTable 
                            TopicsList="@ListTopics" 
                            OnEdit="EditTopic"
                            OnDelete="DeleteTopic" />
                    </div>
                </div>
            </div>
        </div>
    </div> 
}

<style>
    .auto-cols {
        display: flex;
        flex-direction: row;
        width: 100%;
        gap: 16px;
        justify-content: space-between;
    }

    .auto-cols > div {
        flex: 1;
        min-width: 200px;
    }

    .d-flex {
        display: flex;
        flex-direction: row;
        justify-content: right;
    }

    .text-red {
        color: red;
    }

    .text-gray {
        color: #ccc;
    }
</style>

@code {
    private bool isReadOnly = true;
    private bool showError = false;
    private bool isUpdate = false;
    private bool isAdd = false;
    private string userName = "";
    private string userid = "";
    private string roleId = "";
    private List<Models.Category.Role> roles { get; set; } = new();
    private List<Models.Category.LvTopics> lvTopics { get; set; } = new();
    private Scientist scientist { get; set; } = new();
    private Models.Topic.Topics topics { get; set; } = new Models.Topic.Topics
        {
            result = ""
        };
    private List<scientist_topic_role> ListTopics { get; set; } = new();
    private List<scientist_topic_role> RequestTopics { get; set; } = new();
    private List<string> ListTopicIds { get; set; } = new();

    private void EditTopic(Models.Topic.Topics editTopic)
    {
        NavigationManager.NavigateTo($"/User/Topics/Edit/{editTopic.id}");
    }

    private void ToggleTopics()
    {
        isAdd = !isAdd;
        isReadOnly = !isReadOnly;
        topics = new Models.Topic.Topics();
        topics.result = "Chưa_kết_thúc";
    }

    private async Task SaveTopic()
    {
        await AddNewScientistTopic();
    }

    private void Reload()
    {
        NavigationManager.NavigateTo(NavigationManager.Uri, forceLoad: true);
    }

    private string GetEnumDisplayName(Result result)
    {
        var fieldInfo = result.GetType().GetField(result.ToString());
        var displayAttribute = fieldInfo?.GetCustomAttributes(typeof(DisplayAttribute), false)
            .FirstOrDefault() as DisplayAttribute;
        return displayAttribute?.Name ?? result.ToString();
    }

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var principal = authState.User;
        if (principal.Identity?.IsAuthenticated == true)
        {
            userid = principal.FindFirst(ClaimTypes.NameIdentifier)?.Value.ToString();
            userName = principal.Identity.Name;

            if (userid != null && userName != null)
            {
                var response = await ProfileServices.GetProfileAsync(userid);
                if (response != null)
                {
                    scientist = response;
                    ListTopics = await TopicServices.GetProjectsByScientistIdAsync(scientist.id);
                    lvTopics = await LvTopicServices.GetListLvTopics();
                    roles = await RoleServices.GetListRole(RoleType.topic.ToString());
                }
            }
            else
            {
                NavigationManager.NavigateTo("Account/Login");
            }
        }
        else
        {
            NavigationManager.NavigateTo("Account/Login");
        }
    }

    private async Task AddNewScientistTopic()
    {
        try
        {
            showError = true;

            topics.id = Guid.NewGuid().ToString();
            topics.created_at = DateTime.Now;
            topics.updated_at = DateTime.Now;

            var result = await TopicServices.AddTopicAndLinkToScientistAsync(topics, scientist.id, roleId, false, false);
            if (result)
            {
                toastService.ShowSuccess("Thành công!");
                await Task.Delay(3000);
                Reload();
            }
            else
            {
                toastService.ShowError("Thất bại!");
            }

            isAdd = false;
            isReadOnly = true;
            topics = new Models.Topic.Topics();
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"An error occurred: {ex.Message}");
        }
    }

    private async Task DeleteTopic(Models.Topic.Topics topic)
    {
        try
        {
            var confirm = await JSRuntime.InvokeAsync<bool>("confirm", new object[] { "Bạn có chắc muốn xóa đề tài này?" });

            if (confirm)
            {
                var result = await TopicServices.DeleteTopicAndLinkFromScientistAsync(topic.id, scientist.id);
                if (result)
                {
                    toastService.ShowSuccess("Thành công!");
                    await Task.Delay(3000);
                    Reload();
                }
                else
                {
                    toastService.ShowError("Thất bại!");
                }
            }
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"An error occurred while deleting: {ex.Message}");
        }
    }
}
