@page "/User/Topics"
@rendermode InteractiveServer

@using System.Security.Claims;
@using BlazorFE.Components.Pages.User.Topics.Component
@using BlazorFE.Models.Scientist
@using BlazorFE.Services;
@using BlazorFE.Enums;
@using System.ComponentModel.DataAnnotations;
@using BlazorFE.Services.Category;

@inject ScientistServices ProfileServices
@inject TopicServices TopicServices
@inject RoleServices RoleServices
@inject LvTopicServices LvTopicServices
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime

@if (scientist != null)
{
    <h3>Danh sách đề tài của @scientist.profile_name</h3>
    <div class="bg-white">
        <div class="justify-content-center">
            <div class="border-right d-flex flex-column gap-4">
                <div class="">
                    <div class="d-flex flex-row gap-2">
                        <button class="btn btn-primary" @onclick="ToggleTopics" disabled="@isAdd">Thêm đề tài</button>
                        <button class="btn btn-success" @onclick="JoinTopics">Tham gia đề tài</button>
                    </div>
                    @if (isAdd)
                    {
                       <TopicForm 
                            Topics="@topics"
                            IsReadOnly="@isReadOnly"
                            ShowError="@showError"
                            LvTopics="@lvTopics"
                            OnCancel="ToggleTopics"
                            OnSave="SaveTopic" />
                    }
                </div>
                <ListTopicTable 
                    TopicsList="@ListTopics" 
                    OnEdit="EditTopic" 
                    OnDelete="DeleteTopic" 
                 />
                <div>
                    <h3>Danh sách yêu cầu tham gia:</h3>
                    <table class="table table-striped table-hover">
                        <thead>
                            <tr>
                                <th scope="col">#</th>
                                <th scope="col">Tên đề tài</th>
                                <th scope="col">Loại đề tài</th>
                                <th scope="col">Người yêu cầu</th>
                                <th scope="col">Vai trò</th>
                                <th scope="col">Thao tác</th>
                            </tr>
                        </thead>
                        <tbody>
                            @if (RequestTopics != null && RequestTopics.Count > 0)
                            {
                                int i = 1;
                                foreach (var item in RequestTopics)
                                {
                                    <tr>
                                        <th scope="row">@i</th>
                                        <td>@item?.Topics?.topic_name</td>
                                        <td>@item?.Topics?.LvTopics?.lvtopic_name</td>
                                        <td>@item?.Scientist?.profile_name</td>
                                        <td>@item?.Role?.role_name</td>
                                        <td>
                                            <button class="btn btn-warning" @onclick="() => UpdateRequest(item, true)">Duyệt</button>
                                            <button class="btn btn-danger" @onclick="() => UpdateRequest(item, false)">Từ chối</button>
                                        </td>
                                    </tr>
                                    i++;
                                }
                            }
                            else
                            {
                                <tr>
                                    <td colspan="8" class="text-center">Không có yêu cầu tham gia</td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    </div> 
}

<style>
    .auto-cols {
    display: flex;
    flex-direction: row;
    width: 100%;
    gap: 16px;
    justify-content: space-between;
    }

    .auto-cols > div {
    flex: 1;
    min-width: 200px;
    }

    .d-flex {
    display: flex;
    flex-direction: row;
    justify-content: right;
    }

    .text-red {
    color: red;
    }

    .text-gray {
        color: #ccc;
    }
</style>

@code {
    private bool isReadOnly = true;
    private bool showError = false;
    private bool isUpdate = false;
    private bool isAdd = false;
    private string userName = "";
    private string userid = "";
    private string roleId = "";
    private List<Models.Category.Role> roles { get; set; }
    private List<Models.Category.LvTopics> lvTopics { get; set; }
    private Scientist scientist { get; set; }
    private Models.Topic.Topics topics { get; set; } = new Models.Topic.Topics
        {
            result = ""
        };
    private List<scientist_topic_role> ListTopics { get; set; }
    private List<scientist_topic_role> RequestTopics { get; set; }
    private List<string> ListTopicIds { get; set; }

    private void EditTopic(Models.Topic.Topics editTopic)
    {
        isAdd = true;
        isReadOnly = false;
        topics = editTopic;
        isUpdate = true;
    }

    private void ToggleTopics()
    {
        isAdd = !isAdd;
        isReadOnly = !isReadOnly;
        topics = new Models.Topic.Topics();
        topics.result = "Chưa_kết_thúc";
    }

    private void JoinTopics()
    {
        NavigationManager.NavigateTo("/User/JoinTopics");
    }

    private async Task SaveTopic()
    {
        if (isUpdate)
        {
            await UpdateTopic();
        }
        else
        {
            await AddNewScientistTopic();
        }
    }

    private string GetEnumDisplayName(Result result)
    {
        var fieldInfo = result.GetType().GetField(result.ToString());
        var displayAttribute = fieldInfo?.GetCustomAttributes(typeof(DisplayAttribute), false)
            .FirstOrDefault() as DisplayAttribute;
        return displayAttribute?.Name ?? result.ToString();
    }

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var principal = authState.User;
        if (principal.Identity?.IsAuthenticated == true)
        {
            userid = principal.FindFirst(ClaimTypes.NameIdentifier)?.Value.ToString();
            userName = principal.Identity.Name;

            if (userid != null && userName != null)
            {
                var response = await ProfileServices.GetProfileAsync(userid);
                if (response != null)
                {
                    scientist = response;
                    ListTopics = await TopicServices.GetProjectsByScientistIdAsync(scientist.id);
                    if (ListTopics != null && ListTopics.Any())
                    {
                        ListTopicIds = ListTopics
                            .Where(topic => topic.Role != null && topic.Role.role_name == "Chủ nhiệm dự án")
                            .Select(topic => topic.topic_id)
                            .ToList();
                        RequestTopics = await TopicServices.GetJoinRequestsByScientistIdAsync(scientist.id, ListTopicIds);
                    }
                    lvTopics = await LvTopicServices.GetListLvTopics();
                    roles = await RoleServices.GetListRole(RoleType.topic.ToString());
                    var role = roles.FirstOrDefault(role => role.role_name == "Chủ nhiệm dự án" && role.role_type == RoleType.topic.ToString());

                    if (role != null)
                    {
                        roleId = role.id;
                    }
                    else
                    {
                        Console.WriteLine("Role not found");
                    }
                }
            }
            else
            {
                NavigationManager.NavigateTo("Account/Login");
            }
        }
        else
        {
            NavigationManager.NavigateTo("Account/Login");
        }
    }

    private async Task AddNewScientistTopic()
    {
        try
        {
            if (topics == null || string.IsNullOrWhiteSpace(topics.topic_name))
            {
                showError = true;
                return;
            }

            showError = false;

            if (scientist == null || string.IsNullOrEmpty(scientist.id) || string.IsNullOrEmpty(roleId))
            {
                Console.WriteLine($"RoleId: {roleId}");
                throw new InvalidOperationException("Scientist or role information is missing.");
            }

            topics.id = Guid.NewGuid().ToString();
            topics.created_at = DateTime.Now;
            topics.updated_at = DateTime.Now;

            var result = await TopicServices.AddTopicAndLinkToScientistAsync(topics, scientist.id, roleId, false);
            if (result)
            {
                ListTopics = await TopicServices.GetProjectsByScientistIdAsync(scientist.id);
            }

            isAdd = false;
            isReadOnly = true;
            topics = new Models.Topic.Topics();
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"An error occurred: {ex.Message}");
        }
    }

    private async Task UpdateTopic()
    {
        try
        {
            if (topics == null || string.IsNullOrWhiteSpace(topics.topic_name))
            {
                showError = true;
                return;
            }

            showError = false;

            if (scientist == null || string.IsNullOrEmpty(scientist.id) || string.IsNullOrEmpty(roleId))
            {
                throw new InvalidOperationException("Scientist or role information is missing.");
            }

            var result = await TopicServices.UpdateTopicAndLinkToScientistAsync(topics.id, topics, scientist.id, roleId, null, false);
            if (result)
            {
                ListTopics = await TopicServices.GetProjectsByScientistIdAsync(scientist.id);
            }

            isAdd = false;
            isReadOnly = true;
            topics = new Models.Topic.Topics();
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"An error occurred: {ex.Message}");
        }
    }

    private async Task DeleteTopic(Models.Topic.Topics topic)
    {
        try
        {
            var confirm = await JSRuntime.InvokeAsync<bool>("confirm", new object[] { "Bạn có chắc muốn xóa đề tài này?" });

            if (confirm)
            {
                var result = await TopicServices.DeleteTopicAndLinkFromScientistAsync(topic.id, scientist.id);
                if (result)
                {
                    ListTopics = await TopicServices.GetProjectsByScientistIdAsync(scientist.id);
                }
            }
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"An error occurred while deleting: {ex.Message}");
        }
    }

    private async Task UpdateRequest(scientist_topic_role requestTopic, bool isAccept)
    {
        try
        {
            var confirm = await JSRuntime.InvokeAsync<bool>("confirm", new object[] { isAccept ? "Bạn có chắc muốn duyệt yêu cầu này?" : "Bạn có chắc muốn từ chối yêu cầu này?" });

            if (confirm && !string.IsNullOrWhiteSpace(requestTopic?.Topics?.id) && !string.IsNullOrWhiteSpace(requestTopic?.Scientist?.id) && !string.IsNullOrWhiteSpace(requestTopic?.Role?.id))
            {
                var result = await TopicServices.UpdateTopicAndLinkToScientistAsync(requestTopic.Topics.id, requestTopic.Topics, requestTopic.Scientist.id, requestTopic.Role.id, isAccept ? "Đã tham gia" : "Từ chối", true);
                if (result)
                {
                    ListTopicIds = ListTopics.Select(topic => topic.topic_id).ToList();
                    RequestTopics = await TopicServices.GetJoinRequestsByScientistIdAsync(scientist.id, ListTopicIds);
                }
            }
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"An error occurred while deleting: {ex.Message}");
        }
    }
}
