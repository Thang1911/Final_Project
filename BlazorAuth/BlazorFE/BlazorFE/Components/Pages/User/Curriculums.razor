@page "/User/Curriculums"
@rendermode InteractiveServer

@using System.Security.Claims;
@using BlazorFE.Models.Scientist
@using BlazorFE.Services;
@using BlazorFE.Enums;
@using System.ComponentModel.DataAnnotations;
@inject ProfileServices ProfileServices
@inject TopicServices TopicServices
@inject CurriculumServices CurriculumServices
@inject RoleServices RoleServices
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime

@if (scientist != null) {
    <h3>Danh sách giáo trình, sách tham khảo của @scientist.profile_name</h3>

    <div class="bg-white">
        <div class="justify-content-center">
            <div class="border-right">
                <div class="">
                    <button class="btn btn-success" @onclick="ToggleCurriculum">Thêm giáo trình, sách tham khảo</button>
                    @if (scientist != null && isAdd)
                    {
                        <form>
                            <div class="mt-2">
                                <!-- Hàng đầu tiên -->
                                <div class="auto-cols">
                                    <div>
                                        <label class="labels">Tên giáo trình<span class="text-red">*</span></label>
                                        <input readonly="@isReadOnly" type="text" class="form-control" placeholder="Tên giáo trình" @bind="@curriculum.name">
                                        @if (showError && string.IsNullOrWhiteSpace(curriculum.name))
                                        {
                                            <span class="text-danger">Vui lòng nhập tên giáo trình</span>
                                        }
                                    </div>
                                    <div>
                                        <label class="labels">Tên nhà xuất bản<span class="text-red">*</span></label>
                                        <input readonly="@isReadOnly" type="text" class="form-control" placeholder="Tên nhà xuất bản" @bind="@curriculum.publisher">
                                        @if (showError && string.IsNullOrWhiteSpace(curriculum.publisher))
                                        {
                                            <span class="text-danger">Vui lòng nhập tên nhà xuất bản</span>
                                        }
                                    </div>
                                    <div>
                                        <label class="labels">Năm xuất bản<span class="text-red">*</span></label>
                                        <select disabled="@isReadOnly" type="text" class="form-control" @bind="@curriculum.year">
                                            <option value="0" selected>Chọn năm</option>
                                            @for (int year = DateTime.Now.Year; year >= 1900; year--)
                                            {
                                                <option value="@year">@year</option>
                                            }
                                        </select>
                                        @if (showError && curriculum.year == 0)
                                        {
                                            <span class="text-danger">Vui lòng chọn năm xuất bản.</span>
                                        }
                                    </div>
                                </div>

                                <!-- Hàng thứ hai -->
                                <div class="auto-cols mt-2">
                                    <div>
                                        <label class="labels">Loại sách<span class="text-red">*</span></label>
                                        <select disabled="@isReadOnly" type="text" class="form-control" @bind="@curriculum.book_id">
                                            <option value="">Chọn loại sách</option>
                                            <option value="E3B6DF7E-CE0E-4E85-95F4-BA28FCE782FB">Sách giáo trình</option>
                                        </select>
                                        @if (showError && string.IsNullOrWhiteSpace(curriculum.book_id))
                                        {
                                            <span class="text-danger">Vui lòng chọn loại bài báo.</span>
                                        }
                                    </div>
                                    <div>
                                        <label class="labels">Trình độ đào tạo<span class="text-red">*</span></label>
                                        <select disabled="@isReadOnly" type="text" class="form-control" @bind="@curriculum.training_id">
                                            <option value="">Chọn loại bài báo</option>
                                            <option value="1530188C-0550-413E-8AA3-3C1560A516FE">Đại học</option>
                                        </select>
                                        @if (showError && string.IsNullOrWhiteSpace(curriculum.training_id))
                                        {
                                            <span class="text-danger">Vui lòng chọn loại bài báo.</span>
                                        }
                                    </div>
                                    <div>
                                        <label class="labels">Vai trò<span class="text-red">*</span></label>
                                        <select disabled="@isReadOnly" type="text" class="form-control" @bind="@roleId">
                                            <option value="">Chọn vai trò</option>
                                            <option value="F4609032-EFFE-4073-BCF0-414FB057E277">Tác giả</option>
                                        </select>
                                        @if (showError && string.IsNullOrWhiteSpace(roleId))
                                        {
                                            <span class="text-danger">Vui lòng chọn vai tró.</span>
                                        }
                                    </div>
                                </div>
                            </div>

                            <div class="d-flex gap-1 mt-2">
                                <div class="mt-5 text-center">
                                    <button class="btn btn-primary" type="button" @onclick="ToggleCurriculum">Hủy</button>
                                </div>
                                <div class="mt-5 text-center">
                                    <button class="btn btn-success" type="submit" @onclick="SaveMagazine" @onclick:preventDefault>Lưu</button>
                                </div>
                            </div>
                        </form>
                    }

                </div>
                <table class="table table-striped table-hover">
                    <thead>
                        <tr>
                            <th scope="col">#</th>
                            <th scope="col">Tên giáo trình</th>
                            <th scope="col">Năm xuất bản</th>
                            <th scope="col">Nhà xuất bản</th>
                            <th scope="col">Loại sách</th>
                            <th scope="col">Trình độ đào tạo</th>
                            <th scope="col">Vai trò</th>
                            <th scope="col">Tệp đính kèm</th>
                            <th scope="col">Thao tác</th>
                        </tr>
                    </thead>
                    <tbody>
                        @if (curriculums != null && curriculums.Count > 0)
                        {
                            int i = 1;
                            foreach (var item in curriculums)
                            {
                                <tr>
                                    <th scope="row">@i</th>
                                    <td>@item?.Curriculums?.name</td>
                                    <td>@item?.Curriculums?.year</td>
                                    <td>@item?.Curriculums?.publisher</td>
                                    <td>@item?.Curriculums?.Book?.book_name</td>
                                    <td>@item?.Curriculums?.Training?.training_name</td>
                                    <td>@item?.Role?.role_name</td>
                                    <td></td>
                                    <td>
                                        <button class="btn btn-warning" @onclick="() => EditCurriculum(item.Curriculums)">Chỉnh sửa</button>
                                        <button class="btn btn-danger" @onclick="() => DeleteCuriculum(item.Curriculums)">Xóa</button>
                                    </td>
                                </tr>
                                i++;
                            }
                        }
                        else
                        {
                            <tr>
                                <td colspan="8" class="text-center">Không có dữ liệu</td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
    </div>
}
<style>
    .auto-cols {
        display: flex;
        flex-direction: row;
        width: 100%;
        gap: 16px;
        justify-content: space-between;
    }

        .auto-cols > div {
            flex: 1;
            min-width: 200px;
        }

    .d-flex {
        display: flex;
        flex-direction: row;
        justify-content: right;
    }

    .text-red {
        color: red;
    }
</style>

@code {
    private bool isReadOnly = true;
    private bool showError = false;
    private bool isUpdate = false;
    private bool isAdd = false;
    private string userName = "";
    private string userid = "";
    private string roleId = "";
    private List<Models.Category.Role> roles { get; set; }
    private Scientist scientist { get; set; }
    private Models.Curriculum.Curriculums curriculum { get; set; }
    private List<ScientistCurriculumRole> curriculums { get; set; }

    private void EditCurriculum(Models.Curriculum.Curriculums editCurriculum)
    {
        isAdd = true;
        isReadOnly = false;
        curriculum = editCurriculum;
        isUpdate = true;
    }

    private void ToggleCurriculum()
    {
        isAdd = !isAdd;
        isReadOnly = !isReadOnly;
        curriculum = new Models.Curriculum.Curriculums();
    }

    private async Task SaveMagazine()
    {
        if (isUpdate)
        {
            await UpdateCurriculum();
        }
        else
        {
            await AddNewScientistCurriculum();
        }
    }

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var principal = authState.User;
        if (principal.Identity?.IsAuthenticated == true)
        {
            userid = principal.FindFirst(ClaimTypes.NameIdentifier)?.Value.ToString();
            userName = principal.Identity.Name;

            if (userid != null && userName != null)
            {
                var response = await ProfileServices.GetProfileAsync(userid);
                if (response != null)
                {
                    scientist = response;
                    curriculums = await CurriculumServices.GetCurriculumsByScientistIdAsync(scientist.id);
                }
            }
            else
            {
                NavigationManager.NavigateTo("Account/Login");
            }
        }
        else
        {
            NavigationManager.NavigateTo("Account/Login");
        }
    }

    private async Task AddNewScientistCurriculum()
    {
        try
        {
            if (curriculum == null || string.IsNullOrWhiteSpace(curriculum.name))
            {
                showError = true;
                return;
            }

            showError = false;

            if (scientist == null || string.IsNullOrEmpty(scientist.id) || string.IsNullOrEmpty(roleId))
            {
                throw new InvalidOperationException("Scientist or role information is missing.");
            }

            curriculum.id = Guid.NewGuid().ToString();
            curriculum.created_at = DateTime.Now;
            curriculum.updated_at = DateTime.Now;

            var result = await CurriculumServices.AddCurriculumAndLinkToScientistAsync(curriculum, scientist.id, roleId);
            if (result)
            {
                curriculums = await CurriculumServices.GetCurriculumsByScientistIdAsync(scientist.id);
            }

            isAdd = false;
            isReadOnly = true;
            curriculum = null;
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"An error occurred: {ex.Message}");
        }
    }

    private async Task UpdateCurriculum()
    {
        try
        {
            if (curriculum == null || string.IsNullOrWhiteSpace(curriculum.name))
            {
                showError = true;
                return;
            }

            showError = false;

            if (scientist == null || string.IsNullOrEmpty(scientist.id) || string.IsNullOrEmpty(roleId))
            {
                throw new InvalidOperationException("Scientist or role information is missing.");
            }

            var result = await CurriculumServices.UpdateCurriculumAndLinkToScientistAsync(curriculum.id, curriculum, scientist.id, roleId);
            if (result)
            {
                curriculums = await CurriculumServices.GetCurriculumsByScientistIdAsync(scientist.id);
            }

            isAdd = false;
            isReadOnly = true;
            curriculum = null;
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"An error occurred: {ex.Message}");
        }
    }

    private async Task DeleteCuriculum(Models.Curriculum.Curriculums deleteCurriculum)
    {
        try
        {
            var confirm = await JSRuntime.InvokeAsync<bool>("confirm", new object[] { "Bạn có chắc muốn xóa giáo trình này?" });

            if (confirm)
            {
                var result = await CurriculumServices.DeleteCurriculumAndLinkFromScientistAsync(deleteCurriculum.id, scientist.id);
                if (result)
                {
                    curriculums = await CurriculumServices.GetCurriculumsByScientistIdAsync(scientist.id);
                }
            }
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"An error occurred while deleting: {ex.Message}");
        }
    }
}

