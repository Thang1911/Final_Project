@page "/"
@using System.Security.Claims;
@using BlazorFE.Data;
@using BlazorFE.Services;
@using Microsoft.AspNetCore.Authorization;
@using Microsoft.AspNetCore.Identity;
@inject UserManager<ApplicationUser> _UserManager
@inject RoleManager<IdentityRole> _RoleManager
@inject ScientistServices ProfileServices
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IAuthorizationService AuthorizationService
@inject NavigationManager NavigationManager

<PageTitle>Trang chủ</PageTitle>

@if(IsAdmin)
{
    <h1>Xin chào, Admin!</h1>
} else
{
    <h1>Xin chào, nhà khoa học!</h1>
}

<div class="d-flex justify-content-center mt-2">
    <div class="w-fit d-flex flex-wrap gap-4">
        @if(!IsAdmin) {
            <NavLink href="/ProfileDetail" class="d-flex flex-column text-center gap-2 bg-primary bg-opacity-50 rounded-3 text-white width-item align-center no-underline">
                <div class="d-flex justify-content-center">
                    <div class="pt-2 px-2 w-fit">
                        <div class="bi-bank-nav-menu"></div>
                    </div>
                </div>
                <div class="px-2 pb-2">Thông tin cá nhân</div>
            </NavLink>
            <NavLink href="/User/Offers" class="d-flex flex-column text-center gap-2 bg-primary bg-opacity-50 rounded-3 text-white width-item align-center no-underline">
                <div class="d-flex justify-content-center">
                    <div class="pt-2 px-2 w-fit">
                        <div class="bi-bank-nav-menu"></div>
                    </div>
                </div>
                <div class="px-2 pb-2">Đề xuất cá nhân</div>
            </NavLink>
            <NavLink href="/User/Topics" class="d-flex flex-column text-center gap-2 bg-primary bg-opacity-50 rounded-3 text-white width-item align-center no-underline">
                <div class="d-flex justify-content-center">
                    <div class="pt-2 px-2 w-fit">
                        <div class="bi-bank-nav-menu"></div>
                    </div>
                </div>
                <div class="px-2 pb-2">Đề tài/Đề án</div>
            </NavLink>
            <NavLink href="/User/Magazines" class="d-flex flex-column text-center gap-2 bg-primary bg-opacity-50 rounded-3 text-white width-item align-center no-underline">
                <div class="d-flex justify-content-center">
                    <div class="pt-2 px-2 w-fit">
                        <div class="bi-bank-nav-menu"></div>
                    </div>
                </div>
                <div class="px-2 pb-2">Bài báo khoa học</div>
            </NavLink>
            <NavLink href="/User/Curriculums" class="d-flex flex-column text-center gap-2 bg-primary bg-opacity-50 rounded-3 text-white width-item align-center no-underline">
                <div class="d-flex justify-content-center">
                    <div class="pt-2 px-2 w-fit">
                        <div class="bi-bank-nav-menu"></div>
                    </div>
                </div>
                <div class="px-2 pb-2">Giáo trình/Sách tham khảo</div>
            </NavLink>
        }
        else
        {
            <div class="d-flex flex-column text-center gap-2 bg-primary bg-opacity-50 rounded-3 text-white width-item align-center">
                <div class="d-flex justify-content-center">
                    <div class="pt-2 px-2 w-fit">
                        <div class="bi-bank-nav-menu"></div>
                    </div>
                </div>
                <div class="px-2 pb-2">Nhà khoa học</div>
            </div>
            <div class="d-flex flex-column text-center gap-2 bg-primary bg-opacity-50 rounded-3 text-white width-item align-center">
                <div class="d-flex justify-content-center">
                    <div class="pt-2 px-2 w-fit">
                        <div class="bi-bank-nav-menu"></div>
                    </div>
                </div>
                <div class="px-2 pb-2">Quản lý đề xuất</div>
            </div>
            <div class="d-flex flex-column text-center gap-2 bg-primary bg-opacity-50 rounded-3 text-white width-item align-center">
                <div class="d-flex justify-content-center">
                    <div class="pt-2 px-2 w-fit">
                        <div class="bi-bank-nav-menu"></div>
                    </div>
                </div>
                <div class="px-2 pb-2">Đề tài/Đề án</div>
            </div>
            <div class="d-flex flex-column text-center gap-2 bg-primary bg-opacity-50 rounded-3 text-white width-item align-center">
                <div class="d-flex justify-content-center">
                    <div class="pt-2 px-2 w-fit">
                        <div class="bi-bank-nav-menu"></div>
                    </div>
                </div>
                <div class="px-2 pb-2">Hội thảo/Hội nghị</div>
            </div>
            <div class="d-flex flex-column text-center gap-2 bg-primary bg-opacity-50 rounded-3 text-white width-item align-center">
                <div class="d-flex justify-content-center">
                    <div class="pt-2 px-2 w-fit">
                        <div class="bi-bank-nav-menu"></div>
                    </div>
                </div>
                <div class="px-2 pb-2">Bài báo khoa học</div>
            </div>
            <div class="d-flex flex-column text-center gap-2 bg-primary bg-opacity-50 rounded-3 text-white width-item align-center">
                <div class="d-flex justify-content-center">
                    <div class="pt-2 px-2 w-fit">
                        <div class="bi-bank-nav-menu"></div>
                    </div>
                </div>
                <div class="px-2 pb-2">Giáo trình/Sách tham khảo</div>
            </div>
            <div class="d-flex flex-column text-center gap-2 bg-primary bg-opacity-50 rounded-3 text-white width-item align-center">
                <div class="d-flex justify-content-center">
                    <div class="pt-2 px-2 w-fit">
                        <div class="bi-bank-nav-menu"></div>
                    </div>
                </div>
                <div class="px-2 pb-2">Hội đồng khoa học</div>
            </div>
            <div class="d-flex flex-column text-center gap-2 bg-primary bg-opacity-50 rounded-3 text-white width-item align-center">
                <div class="d-flex justify-content-center">
                    <div class="pt-2 px-2 w-fit">
                        <div class="bi-bank-nav-menu"></div>
                    </div>
                </div>
                <div class="px-2 pb-2">Tổng giờ khoa học</div>
            </div>
            <div class="d-flex flex-column text-center gap-2 bg-primary bg-opacity-50 rounded-3 text-white width-item align-center">
                <div class="d-flex justify-content-center">
                    <div class="pt-2 px-2 w-fit">
                        <div class="bi-bank-nav-menu"></div>
                    </div>
                </div>
                <div class="px-2 pb-2">Báo cáo thống kê</div>
            </div>
            <div class="d-flex flex-column text-center gap-2 bg-primary bg-opacity-50 rounded-3 text-white width-item align-center">
                <div class="d-flex justify-content-center">
                    <div class="pt-2 px-2 w-fit">
                        <div class="bi-bank-nav-menu"></div>
                    </div>
                </div>
                <div class="px-2 pb-2">Báo cáo tiến độ</div>
            </div>
        }
    </div>
</div>

@code {
    private string userid { get; set; }
    private string userName { get; set; }
    private bool IsAdmin = false;

    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }
    private const string ADMINISTRATION_ROLE = "Administrators";
    private const string USER_ROLE = "User";
    private ClaimsPrincipal CurrentUser;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var principal = authState.User;

        await EnsureRoleExists(ADMINISTRATION_ROLE);
        await EnsureRoleExists(USER_ROLE);

        if (principal.Identity?.IsAuthenticated == true)
        {
            userid = principal.FindFirst(ClaimTypes.NameIdentifier)?.Value;
            userName = principal.Identity.Name;

            var user = await _UserManager.FindByNameAsync(userName);
            if (user != null)
            {
                if (userName.ToLower() == "admin@gmail.com")
                {
                    await EnsureUserInRole(user, ADMINISTRATION_ROLE);
                }
                else
                {
                    await EnsureUserInRole(user, USER_ROLE);
                }
            }
            CurrentUser = (await authenticationStateTask).User;

            if (!string.IsNullOrEmpty(userid) && !string.IsNullOrEmpty(userName))
            {
                var response = await ProfileServices.GetProfileAsync(userid);
                var authorizationResult = await AuthorizationService.AuthorizeAsync(principal, null, "Administrators");
                IsAdmin = authorizationResult.Succeeded;
                Console.WriteLine(IsAdmin);
                if (IsAdmin)
                {
                    return;
                }
                else if (response == null && !IsAdmin)
                {
                    NavigationManager.NavigateTo("/ProfileDetail");
                }
            }
            else
            {
                NavigationManager.NavigateTo("Account/Login");
            }
        }
        else
        {
            NavigationManager.NavigateTo("Account/Login");
        } 
    }

    private async Task EnsureRoleExists(string roleName)
    {
        var roleExists = await _RoleManager.RoleExistsAsync(roleName);
        if (!roleExists)
        {
            await _RoleManager.CreateAsync(new IdentityRole(roleName));
        }
    }

    private async Task EnsureUserInRole(ApplicationUser user, string roleName)
    {
        var isInRole = await _UserManager.IsInRoleAsync(user, roleName);
        if (!isInRole)
        {
            await _UserManager.AddToRoleAsync(user, roleName);
        }
    }
}
