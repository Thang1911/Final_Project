@page "/Admin/Category/Roles"
@rendermode InteractiveServer

@using BlazorFE.Models.Category
@using BlazorFE.Services
@using BlazorFE.Enums
@using Helpers
@inject RoleServices RoleServices
@inject IJSRuntime JSRuntime

<h3>Quản lý vai trò</h3>

<div class="mb-3">
    <button class="btn btn-success" @onclick="ToggleAddRole">Thêm vai trò</button>
</div>

@if (isAdd)
{
    <form>
        <div class="mt-2">
            <div class="row">
                <div class="col-md-6">
                    <label class="form-label">Tên vai trò<span class="text-danger">*</span></label>
                    <input type="text" class="form-control" @bind="role.role_name">
                    @if (showError && string.IsNullOrWhiteSpace(role.role_name))
                    {
                        <span class="text-danger">Vui lòng nhập tên role.</span>
                    }
                </div>
                <div class="col-md-6">
                    <label class="form-label">Loại vai trò</label>
                    <select class="form-select" @bind="role.role_type">
                        <option value="">Chọn loại vai trò</option>
                        @foreach (var type in Enum.GetValues(typeof(RoleType)).Cast<RoleType>())
                        {
                            <option value="@type.ToString()">@Helpers.EnumHelper.GetEnumDisplayName(type)</option>
                        }
                    </select>
                </div>

            </div>
        </div>

        <div class="d-flex mt-3 justify-content-end">
            <button class="btn btn-primary me-2" @onclick="ToggleAddRole">Hủy</button>
            <button class="btn btn-success" type="button" @onclick="SaveRole">Lưu</button>
        </div>
    </form>
}

<table class="table table-striped mt-3">
    <thead>
        <tr>
            <th>#</th>
            <th>Tên vai trò</th>
            <th>Loại vai trò</th>
            <th>Ngày tạo</th>
            <th>Thao tác</th>
        </tr>
    </thead>
    <tbody>
        @if (roles != null && roles.Count > 0)
        {
            int i = 1;
            foreach (var item in roles)
            {
                <tr>
                    <td>@i</td>
                    <td>@item.role_name</td>
                    <td>
                        @if (Enum.TryParse(typeof(RoleType), item.role_type, out var parsedRoleType))
                        {
                            @Helpers.EnumHelper.GetEnumDisplayName((RoleType)parsedRoleType)
                        }
                        else
                        {
                            <span class="text-danger">Không hợp lệ</span>
                        }
                    </td>

                    <td>@item.created_at.ToString("dd/MM/yyyy")</td>
                    <td>
                        <button class="btn btn-warning me-2" @onclick="() => EditRole(item)">Sửa</button>
                        <button class="btn btn-danger" @onclick="() => DeleteRole(item.id)">Xóa</button>
                    </td>
                </tr>
                i++;
            }
        }
        else
        {
            <tr>
                <td colspan="5" class="text-center">Không có dữ liệu</td>
            </tr>
        }
    </tbody>
</table>

<style>
    .text-danger {
        color: red;
    }
</style>

@code {
    private List<Role> roles { get; set; } = new();
    private Role role { get; set; } = new();
    private bool isAdd = false;
    private bool showError = false;

    protected override async Task OnInitializedAsync()
    {
        await LoadRoles();
    }

    private async Task LoadRoles()
    {
        roles = await RoleServices.GetListRole(null);
    }

    private void ToggleAddRole()
    {
        isAdd = !isAdd;
        role = new Role();
        showError = false;
    }

    private void EditRole(Role editRole)
    {
        isAdd = true;
        role = new Role
            {
                id = editRole.id,
                role_name = editRole.role_name,
                role_type = editRole.role_type,
                created_at = editRole.created_at,
                updated_at = editRole.updated_at
            };
    }

    private async Task SaveRole()
    {
        if (string.IsNullOrWhiteSpace(role.role_name))
        {
            showError = true;
            return;
        }

        if (string.IsNullOrEmpty(role.id))
        {
            role.id = Guid.NewGuid().ToString();
            role.created_at = DateTime.Now;
            role.updated_at = DateTime.Now;
            await RoleServices.AddRole(role);
        }
        else
        {
            role.updated_at = DateTime.Now;
            await RoleServices.UpdateRole(role);
        }

        isAdd = false;
        await LoadRoles();
    }

    private async Task DeleteRole(string roleId)
    {
        var confirm = await JSRuntime.InvokeAsync<bool>("confirm", "Bạn có chắc chắn muốn xóa role này?");
        if (confirm)
        {
            await RoleServices.DeleteRole(roleId);
            await LoadRoles();
        }
    }
}
