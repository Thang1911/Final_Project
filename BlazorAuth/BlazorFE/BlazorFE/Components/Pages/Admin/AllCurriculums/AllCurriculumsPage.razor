@page "/Admin/AllCurriculums"
@rendermode InteractiveServer

@using Microsoft.AspNetCore.Authorization;

@attribute [Authorize(Roles = "Administrators")]

@using BlazorFE.Models.Scientist
@using BlazorFE.Models.Curriculum
@using BlazorFE.Services
@using BlazorFE.Components.Pages.Admin.AllCurriculums.Components

@inject CurriculumServices CurriculumServices
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
@inject IToastService toastService

@if (listCurriculums != null)
{   
    <div class="card shadow rounded">
        <div class="p-3">
            <DataTable Searchable="true">
                <AllCurriculumsTable CurriculumsList="@listCurriculums" Delete="ConfirmDelete" />
            </DataTable>
        </div>
    </div>
}

@code {
    public List<ScientistCurriculumRole> listCurriculums { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await LoadScientists();
    }

    private async Task LoadScientists()
    {
        listCurriculums = (await CurriculumServices.GetAllCurriculumsAsync())
            .Where(smr => smr.requestStatus == "Đã tham gia")
            .ToList();
    }

    private void Reload()
    {
        NavigationManager.NavigateTo(NavigationManager.Uri, forceLoad: true);
    }

    private async Task ConfirmDelete(Curriculums cur)
    {
        bool confirm = await JSRuntime.InvokeAsync<bool>("confirm", $"Bạn có chắc chắn muốn xóa '{cur.name}'?");
        if (confirm)
        {
            await DeleteCurriculum(cur.id);
        }
    }

    private async Task DeleteCurriculum(string curId)
    {
        var success = await CurriculumServices.DeleteCurriculumAsync(curId);

        if (success)
        {
            toastService.ShowSuccess("Xoá giáo trình thành công!");
            await Task.Delay(3000);
            Reload();
        }
        else
        {
            toastService.ShowError("Xoá giáo trình không thành công!");
        }
    }
}
