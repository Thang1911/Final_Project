@page "/Admin/AllReports/Month"
@rendermode InteractiveServer
@using Microsoft.AspNetCore.Authorization

@attribute [Authorize(Roles = "Administrators")]

@using BlazorFE.Models.Scientist
@using BlazorFE.Models.Category
@using BlazorFE.Services

@inject MagazineServices MagazineServices
@inject TopicServices TopicServices
@inject CurriculumServices CurriculumServices
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime


<div class="card shadow rounded">
    <div class="p-3">
        <div class="d-flex justify-content-center">
            <h3>
                Báo cáo và thống kê kết quả khoa học theo tháng
            </h3>
        </div>
        <div>
            <div class="d-flex auto-cols">
                <div class="d-flex flex-column gap-2">
                    <label for="month" class="form-label">Tháng</label>
                    <select class="form-select" id="month" @bind="selectedMonth">
                        <option value="0" selected>Chọn tháng</option>
                        @for (int month = 1; month <= 12; month++)
                        {
                            <option value="@month">Tháng @month</option>
                        }
                    </select>
                </div>

                <div class="d-flex flex-column gap-2">
                    <label for="year" class="form-label">Năm</label>
                    <select class="form-select" id="year" @bind="selectedYear">
                        <option value="0" selected>Chọn năm</option>
                        @for (int year = DateTime.Now.Year; year >= 1900; year--)
                        {
                            <option value="@year">@year</option>
                        }
                    </select>
                </div>
            </div>

            <div class="d-flex gap-3 mt-3">
                <button class="btn btn-primary" disabled="@IsDisabled" @onclick="ApplyFilter">
                    @if (IsExportLoading)
                    {
                        <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                        <span> Đang xuất...</span>
                    }
                    else
                    {
                        <span>Xem trước</span>
                    }
                </button>
            </div>
        </div>
        @if (!string.IsNullOrEmpty(pdfUrl))
        {
            <iframe src="@pdfUrl" width="100%" height="600px"></iframe>
        }
    </div>
</div>

<style>
    .auto-cols {
        display: flex;
        flex-direction: row;
        width: 100%;
        gap: 16px;
        justify-content: space-between;
    }

        .auto-cols > div {
            flex: 1;
            min-width: 200px;
        }

    .d-flex {
        display: flex;
        flex-direction: row;
        justify-content: right;
    }

    .text-red {
        color: red;
    }

</style>

@code {
    public List<ScientistMagazineRole> listMagazines { get; set; } = new();
    private List<ScientistMagazineRole> allMagazines { get; set; } = new();

    public List<ScientistCurriculumRole> CurriculumsList { get; set; } = new();
    public List<ScientistCurriculumRole> AllCurriculums { get; set; } = new();

    public List<scientist_topic_role> TopicsList { get; set; } = new();
    public List<scientist_topic_role> AllTopics { get; set; } = new();

    private int selectedYear { get; set; } = 0;
    private int selectedMonth { get; set; } = 0;

    private bool IsDisabled => selectedYear == 0;
    private bool IsExportLoading { get; set; } = false;

    private string pdfUrl { get; set; } = "";

    protected override async Task OnInitializedAsync()
    {
        await LoadMagazines();
        await LoadCurriculums();
        await LoadTopics();
    }

    private async Task LoadMagazines()
    {
        allMagazines = (await MagazineServices.GetAllMagazinesAsync())
            .ToList();
    }

    private async Task LoadCurriculums()
    {
        AllCurriculums = (await CurriculumServices.GetAllCurriculumsAsync())
            .ToList();
    }

    private async Task LoadTopics()
    {
        AllTopics = (await TopicServices.GetAllTopicAsync())
            .ToList();
    }

    private async void ApplyFilter()
    {
        IsExportLoading = true;

        listMagazines = allMagazines
            .Where(mag => mag?.Magazines?.year == selectedYear && mag?.Magazines?.month == selectedMonth)
            .ToList();

        CurriculumsList = AllCurriculums
        .Where(cur => cur?.Curriculums?.year == selectedYear && cur?.Curriculums?.month == selectedMonth)
        .ToList();

        TopicsList = AllTopics
            .Where(top => top?.Topics?.start_date.HasValue == true &&
                  top.Topics.start_date.Value.Year == selectedYear &&
                  top.Topics.start_date.Value.Month == selectedMonth)
            .ToList();

        await ExportToPdf();
    }

    private void ResetFilter()
    {
        selectedYear = 0;
        listMagazines = new List<ScientistMagazineRole>(allMagazines);
    }


    public async Task ExportToPdf()
    {
        using (MemoryStream ms = new MemoryStream())
        {
            // Tạo PDF writer
            PdfWriter writer = new PdfWriter(ms);
            PdfDocument pdf = new PdfDocument(writer);
            Document document = new Document(pdf);

            string fontPath = Path.Combine(Directory.GetCurrentDirectory(), "wwwroot", "fonts", "Tinos-Regular.TTF");
            PdfFont vietnameseFont = PdfFontFactory.CreateFont(fontPath);

            // Thêm tiêu đề cho PDF
            document.Add(new Paragraph($"KẾT QUẢ HOẠT ĐỘNG KHOA HỌC VÀ CÔNG NGHỆ THÁNG {selectedMonth} NĂM {selectedYear}")
                .SetFont(vietnameseFont)
                .SetTextAlignment(TextAlignment.CENTER)
                .SetFontSize(17));


            document.Add(new Paragraph("A. BÀI BÁO ĐĂNG TRÊN TẠP TRÍ KHOA HỌC QUỐC TẾ")
               .SetFont(vietnameseFont)
               .SetFontSize(17));


            Table tableMagazineInternational = new Table(7, true);

            tableMagazineInternational.SetBorder(new SolidBorder(2));

            // Thêm tiêu đề bảng
            tableMagazineInternational.AddHeaderCell("Số TT").SetFont(vietnameseFont);
            tableMagazineInternational.AddHeaderCell("Tên bài báo").SetFont(vietnameseFont);
            tableMagazineInternational.AddHeaderCell("Tên tạp chí").SetFont(vietnameseFont);
            tableMagazineInternational.AddHeaderCell("Người thực hiện").SetFont(vietnameseFont);
            tableMagazineInternational.AddHeaderCell("Chỉ mục khoa học").SetFont(vietnameseFont);
            tableMagazineInternational.AddHeaderCell("Xếp loại").SetFont(vietnameseFont);
            tableMagazineInternational.AddHeaderCell("Ghi chú").SetFont(vietnameseFont);


            int i = 1;
            var groupedByMagazine = listMagazines
                .Where(x => Enum.TryParse<MagazineScope>(x.Magazines?.magazine_scope, out var scope) && scope == MagazineScope.Quốc_tế)
                .GroupBy(x => x.magazine_id)
                .ToList();

            if (groupedByMagazine != null && groupedByMagazine.Count > 0)
            {
                foreach (var group in groupedByMagazine)
                {
                    var magazine = group.First().Magazines;
                    var scientists = group.Select(x => new { x.Scientist?.profile_name, RoleName = x.Role?.role_name }).ToList();

                    MagazineRank enumValueRank;
                    string displayRank = Enum.TryParse(magazine?.rank, out enumValueRank)
                        ? Helpers.EnumHelper.GetEnumDisplayName(enumValueRank)
                        : "";

                    tableMagazineInternational.AddCell(i.ToString()).SetFont(vietnameseFont).SetBorder(new SolidBorder(1));
                    tableMagazineInternational.AddCell(magazine?.magazine_name ?? "").SetFont(vietnameseFont).SetBorder(new SolidBorder(1));
                    tableMagazineInternational.AddCell(magazine?.journal ?? "").SetFont(vietnameseFont).SetBorder(new SolidBorder(1));
                    tableMagazineInternational.AddCell(string.Join(", ", scientists.Select(s => $"{s.profile_name} ({s.RoleName})"))).SetFont(vietnameseFont).SetBorder(new SolidBorder(1));
                    tableMagazineInternational.AddCell(magazine?.MagazineScore?.magazine_score_name ?? "").SetFont(vietnameseFont).SetBorder(new SolidBorder(1));
                    tableMagazineInternational.AddCell(displayRank).SetFont(vietnameseFont).SetBorder(new SolidBorder(1));
                    tableMagazineInternational.AddCell($"Số trích dẫn: {magazine?.citation_count}; Tập số: {magazine?.volume}; Số trang: {magazine?.page_count}").SetFont(vietnameseFont).SetBorder(new SolidBorder(1));

                    i++;
                }
            }
            else
            {
                Cell emptyCell = new Cell(1, 7).Add(new Paragraph("Không có dữ liệu").SetFont(vietnameseFont));
                emptyCell.SetTextAlignment(TextAlignment.CENTER);
                tableMagazineInternational.AddCell(emptyCell);
            }


            // Thêm bảng vào tài liệu
            document.Add(tableMagazineInternational);
            tableMagazineInternational.Complete();



            document.Add(new Paragraph("\n").SetHeight(30));

            document.Add(new Paragraph("B. BÀI BÁO ĐĂNG TRÊN TẠP TRÍ KHOA HỌC TRONG NƯỚC")
               .SetFont(vietnameseFont)
               .SetFontSize(17));
            // Tạo bảng
            Table tableDomestic = new Table(6, true);

            tableDomestic.SetBorder(new SolidBorder(2));

            // Thêm tiêu đề bảng
            tableDomestic.AddHeaderCell("Số TT").SetFont(vietnameseFont);
            tableDomestic.AddHeaderCell("Nội dung").SetFont(vietnameseFont);
            tableDomestic.AddHeaderCell("Đơn vị chủ trì, Tác giả").SetFont(vietnameseFont);
            tableDomestic.AddHeaderCell("Chỉ mục khoa học").SetFont(vietnameseFont);
            tableDomestic.AddHeaderCell("Xếp loại").SetFont(vietnameseFont);
            tableDomestic.AddHeaderCell("Ghi chú").SetFont(vietnameseFont);


            int j = 1;
            var groupedByMagazineDomestic = listMagazines
                .Where(x => Enum.TryParse<MagazineScope>(x.Magazines?.magazine_scope, out var scope) && scope == MagazineScope.Trong_nước)
                .GroupBy(x => x.magazine_id)
                .ToList();

            if (groupedByMagazineDomestic != null && groupedByMagazineDomestic.Count > 0)
            {
                foreach (var group in groupedByMagazineDomestic)
                {
                    var magazine = group.First().Magazines;
                    var scientists = group.Select(x => new { x.Scientist?.profile_name, RoleName = x.Role?.role_name }).ToList();

                    MagazineRank enumValueRank;
                    string displayRank = Enum.TryParse(magazine?.rank, out enumValueRank)
                        ? Helpers.EnumHelper.GetEnumDisplayName(enumValueRank)
                        : "";

                    tableDomestic.AddCell(j.ToString()).SetFont(vietnameseFont).SetBorder(new SolidBorder(1));
                    tableDomestic.AddCell(magazine?.magazine_name ?? "").SetFont(vietnameseFont).SetBorder(new SolidBorder(1));
                    tableDomestic.AddCell(string.Join(", ", scientists.Select(s => $"{s.profile_name} ({s.RoleName})"))).SetFont(vietnameseFont).SetBorder(new SolidBorder(1));
                    tableDomestic.AddCell(magazine?.MagazineScore?.magazine_score_name ?? "").SetFont(vietnameseFont).SetBorder(new SolidBorder(1));
                    tableDomestic.AddCell(displayRank).SetFont(vietnameseFont).SetBorder(new SolidBorder(1));
                    tableDomestic.AddCell($"Số trích dẫn: {magazine?.citation_count}; Tập số: {magazine?.volume}; Số trang: {magazine?.page_count}").SetFont(vietnameseFont).SetBorder(new SolidBorder(1));

                    j++;
                }
            }
            else
            {
                Cell emptyCell = new Cell(1, 6).Add(new Paragraph("Không có dữ liệu").SetFont(vietnameseFont));
                emptyCell.SetTextAlignment(TextAlignment.CENTER);
                tableDomestic.AddCell(emptyCell);
            }
            // Thêm bảng vào tài liệu
            document.Add(tableDomestic);
            tableDomestic.Complete();


            document.Add(new Paragraph("\n").SetHeight(30));

            document.Add(new Paragraph("C. BÀI BÁO ĐĂNG KỶ YẾU HỘI THẢO")
               .SetFont(vietnameseFont)
               .SetFontSize(17));
            // Tạo bảng
            Table tableMagazineCoference = new Table(6, true);

            tableMagazineCoference.SetBorder(new SolidBorder(2));

            // Thêm tiêu đề bảng
            tableMagazineCoference.AddHeaderCell("Số TT").SetFont(vietnameseFont);
            tableMagazineCoference.AddHeaderCell("Tên bài báo").SetFont(vietnameseFont);
            tableMagazineCoference.AddHeaderCell("Tên hội thảo").SetFont(vietnameseFont);
            tableMagazineCoference.AddHeaderCell("Đơn vị chủ trì, Tác giả").SetFont(vietnameseFont);
            tableMagazineCoference.AddHeaderCell("Chỉ mục khoa học").SetFont(vietnameseFont);
            tableMagazineCoference.AddHeaderCell("Ghi chú").SetFont(vietnameseFont);


            int c = 1;
            var groupedByMagazineCoference = listMagazines
                .Where(x => x?.Magazines?.Paper?.paper_type == "Hội thảo")
                .GroupBy(x => x.magazine_id)
                .ToList();

            if (groupedByMagazineCoference != null && groupedByMagazineCoference.Count > 0)
            {
                foreach (var group in groupedByMagazineCoference)
                {
                    var magazine = group.First().Magazines;
                    var scientists = group.Select(x => new { x.Scientist?.profile_name, RoleName = x.Role?.role_name }).ToList();

                    MagazineRank enumValueRank;
                    string displayRank = Enum.TryParse(magazine?.rank, out enumValueRank)
                        ? Helpers.EnumHelper.GetEnumDisplayName(enumValueRank)
                        : "";

                    tableMagazineCoference.AddCell(c.ToString()).SetFont(vietnameseFont).SetBorder(new SolidBorder(1));
                    tableMagazineCoference.AddCell(magazine?.magazine_name ?? "").SetFont(vietnameseFont).SetBorder(new SolidBorder(1));
                    tableMagazineCoference.AddCell($"{magazine?.Paper?.paper_name} - {magazine?.Paper?.scope ?? ""}").SetFont(vietnameseFont).SetBorder(new SolidBorder(1));
                    tableMagazineCoference.AddCell(string.Join(", ", scientists.Select(s => $"{s.profile_name} ({s.RoleName})"))).SetFont(vietnameseFont).SetBorder(new SolidBorder(1));
                    tableMagazineCoference.AddCell(magazine?.MagazineScore?.magazine_score_name ?? "").SetFont(vietnameseFont).SetBorder(new SolidBorder(1));
                    tableMagazineCoference.AddCell($"Số trích dẫn: {magazine?.citation_count}; Tập số: {magazine?.volume}; Số trang: {magazine?.page_count}").SetFont(vietnameseFont).SetBorder(new SolidBorder(1));

                    c++;
                }
            }
            else
            {
                Cell emptyCell = new Cell(1, 6).Add(new Paragraph("Không có dữ liệu").SetFont(vietnameseFont));
                emptyCell.SetTextAlignment(TextAlignment.CENTER);
                tableMagazineCoference.AddCell(emptyCell);
            }
            // Thêm bảng vào tài liệu
            document.Add(tableMagazineCoference);
            tableMagazineCoference.Complete();


            document.Add(new Paragraph("\n").SetHeight(30));
            document.Add(new Paragraph("D. BÀI BÁO ĐĂNG TẠP CHÍ KHOA HỌC THANH NIÊN")
               .SetFont(vietnameseFont)
               .SetFontSize(17));
            // Tạo bảng
            Table tableMagazineScientific= new Table(5, true);

            tableMagazineScientific.SetBorder(new SolidBorder(2));

            // Thêm tiêu đề bảng
            tableMagazineScientific.AddHeaderCell("Số TT").SetFont(vietnameseFont);
            tableMagazineScientific.AddHeaderCell("Tên bài báo").SetFont(vietnameseFont);
            tableMagazineScientific.AddHeaderCell("Đơn vị chủ trì, Tác giả").SetFont(vietnameseFont);
            tableMagazineScientific.AddHeaderCell("Số trích dẫn, tập số, số trang").SetFont(vietnameseFont);
            tableMagazineScientific.AddHeaderCell("Ghi chú").SetFont(vietnameseFont);


            int s = 1;
            var groupedByMagazineScientific = listMagazines
                .Where(x => x?.Magazines?.Paper?.paper_type == "Tạp chí")
                .GroupBy(x => x.magazine_id)
                .ToList();

            if (groupedByMagazineScientific != null && groupedByMagazineScientific.Count > 0)
            {
                foreach (var group in groupedByMagazineScientific)
                {
                    var magazine = group.First().Magazines;
                    var scientists = group.Select(x => new { x.Scientist?.profile_name, RoleName = x.Role?.role_name }).ToList();

                    MagazineRank enumValueRank;
                    string displayRank = Enum.TryParse(magazine?.rank, out enumValueRank)
                        ? Helpers.EnumHelper.GetEnumDisplayName(enumValueRank)
                        : "";

                    tableMagazineScientific.AddCell(s.ToString()).SetFont(vietnameseFont).SetBorder(new SolidBorder(1));
                    tableMagazineScientific.AddCell(magazine?.magazine_name ?? "").SetFont(vietnameseFont).SetBorder(new SolidBorder(1));
                    tableMagazineScientific.AddCell(string.Join(", ", scientists.Select(s => $"{s.profile_name} ({s.RoleName})"))).SetFont(vietnameseFont).SetBorder(new SolidBorder(1));
                    tableMagazineScientific.AddCell($"Số trích dẫn: {magazine?.citation_count}; Tập số: {magazine?.volume}; Số trang: {magazine?.page_count}").SetFont(vietnameseFont).SetBorder(new SolidBorder(1));
                    tableMagazineScientific.AddCell("").SetFont(vietnameseFont).SetBorder(new SolidBorder(1));

                    s++;
                }
            }
            else
            {
                Cell emptyCell = new Cell(1, 5).Add(new Paragraph("Không có dữ liệu").SetFont(vietnameseFont));
                emptyCell.SetTextAlignment(TextAlignment.CENTER);
                tableMagazineScientific.AddCell(emptyCell);
            }
            // Thêm bảng vào tài liệu
            document.Add(tableMagazineScientific);
            tableMagazineScientific.Complete();


            document.Add(new Paragraph("\n").SetHeight(30));
            document.Add(new Paragraph("F. ĐỀ TÀI KHOA HỌC")
               .SetFont(vietnameseFont)
               .SetFontSize(17));
            // Tạo bảng
            Table tableScientificTopics = new Table(5, true);

            tableScientificTopics.SetBorder(new SolidBorder(2));

            // Thêm tiêu đề bảng
            tableScientificTopics.AddHeaderCell("Số TT").SetFont(vietnameseFont);
            tableScientificTopics.AddHeaderCell("Mã số đề tài").SetFont(vietnameseFont);
            tableScientificTopics.AddHeaderCell("Tên đề tài").SetFont(vietnameseFont);
            tableScientificTopics.AddHeaderCell("Chủ nhiệm đề tài").SetFont(vietnameseFont);
            tableScientificTopics.AddHeaderCell("Ghi chú").SetFont(vietnameseFont);


            int p = 1;
            var groupedByTopicIds = TopicsList
                .GroupBy(x => x.topic_id)
                .ToList();

            if (groupedByTopicIds != null && groupedByTopicIds.Count > 0)
            {
                foreach (var group in groupedByTopicIds)
                {
                    var topic = group.First().Topics;
                    var scientists = group.Select(x => new { x.Scientist?.profile_name, RoleName = x.Role?.role_name }).ToList();

                    tableScientificTopics.AddCell(p.ToString()).SetFont(vietnameseFont).SetBorder(new SolidBorder(1));
                    tableScientificTopics.AddCell(topic?.topicId ?? "").SetFont(vietnameseFont).SetBorder(new SolidBorder(1));
                    tableScientificTopics.AddCell(topic?.topic_name ?? "").SetFont(vietnameseFont).SetBorder(new SolidBorder(1));
                    tableScientificTopics.AddCell(string.Join(", ", scientists.Select(s => $"{s.profile_name} ({s.RoleName})"))).SetFont(vietnameseFont).SetBorder(new SolidBorder(1));
                    tableScientificTopics.AddCell("").SetFont(vietnameseFont).SetBorder(new SolidBorder(1));

                    p++;
                }
            }
            else
            {
                Cell emptyCell = new Cell(1, 5).Add(new Paragraph("Không có dữ liệu").SetFont(vietnameseFont));
                emptyCell.SetTextAlignment(TextAlignment.CENTER);
                tableScientificTopics.AddCell(emptyCell);
            }

            document.Add(tableScientificTopics);
            tableScientificTopics.Complete();


            document.Add(new Paragraph("\n").SetHeight(30));
            document.Add(new Paragraph("G. GIÁO TRÌNH")
               .SetFont(vietnameseFont)
               .SetFontSize(17));

            Table tableScientificCurriculums = new Table(5, true);

            tableScientificCurriculums.SetBorder(new SolidBorder(2));

            tableScientificCurriculums.AddHeaderCell("Số TT").SetFont(vietnameseFont);
            tableScientificCurriculums.AddHeaderCell("Nội dung").SetFont(vietnameseFont);
            tableScientificCurriculums.AddHeaderCell("Đơn vị chủ trì, Tác giả").SetFont(vietnameseFont);
            tableScientificCurriculums.AddHeaderCell("Thể loại").SetFont(vietnameseFont);
            tableScientificCurriculums.AddHeaderCell("Ghi chú").SetFont(vietnameseFont);


            int g = 1;
            var groupedByCurriculumId = CurriculumsList
                .GroupBy(x => x.curriculum_id)
                .ToList();

            if (groupedByCurriculumId != null && groupedByCurriculumId.Count > 0)
            {
                foreach (var group in groupedByCurriculumId)
                {
                    var curriculum = group.First().Curriculums;
                    var scientists = group.Select(x => new { x.Scientist?.profile_name, RoleName = x.Role?.role_name }).ToList();

                    tableScientificCurriculums.AddCell(g.ToString()).SetFont(vietnameseFont).SetBorder(new SolidBorder(1));
                    tableScientificCurriculums.AddCell(curriculum?.name ?? "").SetFont(vietnameseFont).SetBorder(new SolidBorder(1));
                    tableScientificCurriculums.AddCell(string.Join(", ", scientists.Select(s => $"{s.profile_name} ({s.RoleName})"))).SetFont(vietnameseFont).SetBorder(new SolidBorder(1));
                    tableScientificCurriculums.AddCell(curriculum?.Book?.book_name ?? "").SetFont(vietnameseFont).SetBorder(new SolidBorder(1));
                    tableScientificCurriculums.AddCell("").SetFont(vietnameseFont).SetBorder(new SolidBorder(1));

                    g++;
                }
            }
            else
            {
                Cell emptyCell = new Cell(1, 5).Add(new Paragraph("Không có dữ liệu").SetFont(vietnameseFont));
                emptyCell.SetTextAlignment(TextAlignment.CENTER);
                tableScientificCurriculums.AddCell(emptyCell);
            }

            document.Add(tableScientificCurriculums);
            tableScientificCurriculums.Complete();


            // Lưu tệp PDF vào ổ đĩa hoặc tải về
            pdf.Close();
            IsExportLoading = false;


            var pdfBytes = ms.ToArray();
            var fileName = $"Báo cáo khoa học tháng {selectedMonth} năm {selectedYear}.pdf";
            var contentType = "application/pdf";
            SaveAsFile(pdfBytes, fileName, contentType);
        }
    }

    private void SaveAsFile(byte[] content, string fileName, string contentType)
    {
        var base64File = Convert.ToBase64String(content);
        // await JSRuntime.InvokeVoidAsync("downloadFilePDF", fileName, base64File, contentType);
        pdfUrl = $"data:application/pdf;base64,{base64File}";
    }
}
