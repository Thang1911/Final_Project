@page "/Admin/AllReports/Magazines"
@rendermode InteractiveServer
@using Microsoft.AspNetCore.Authorization

@attribute [Authorize(Roles = "Administrators")]

@using BlazorFE.Models.Scientist
@using BlazorFE.Models.Category
@using BlazorFE.Services

@inject MagazineServices MagazineServices
@inject OfficeServices OfficeServices
@inject PaperServices PaperServices
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime

@if (listMagazines != null)
{
    <div class="card shadow rounded">
        <div class="p-3">
            <div>
                <h4 class="text-center">Lọc</h4>
            </div>
            <div>
                <div class="d-flex auto-cols">
                    <div class="d-flex flex-column gap-2">
                        <label for="office" class="form-label">Cơ quan</label>
                        <select class="form-select" id="office" @bind="selectedOfficeId">
                            <option value="">Tất cả</option>
                            @foreach (var office in listOffices)
                            {
                                <option value="@office.office_id">@office.office_name</option>
                            }
                        </select>
                    </div>
                    <div class="d-flex flex-column gap-2">
                        <label for="year" class="form-label">Năm công bố</label>
                        <select class="form-select" id="year" @bind="selectedYear">
                            <option value="0" selected>Chọn năm</option>
                            @for (int year = DateTime.Now.Year; year >= 1900; year--)
                            {
                                <option value="@year">@year</option>
                            }
                        </select>
                    </div>
                    <div class="d-flex flex-column gap-2">
                        <label for="paper" class="form-label">Loại bài báo</label>
                        <select class="form-select" id="paper" @bind="selectedPaperId">
                            <option value="">Tất cả</option>
                            @foreach (var paper in listPapers)
                            {
                                <option value="@paper.id">@paper.paper_name</option>
                            }
                        </select>
                    </div>
                    <div class="d-flex flex-column gap-2">
                        <label for="scope" class="form-label">Phạm vi</label>
                        <select class="form-select" id="scope" @bind="selectedScope">
                            <option value="">Tất cả</option>
                            <option value="Trong_nước">Trong nước</option>
                            <option value="Quốc_tế">Quốc tế</option>
                        </select>
                    </div>
                </div>

                <div class="d-flex gap-3 mt-3">
                    <button class="btn btn-primary" @onclick="ApplyFilter">Áp dụng bộ lọc</button>
                    <button class="btn btn-secondary" @onclick="ResetFilter">Xóa bộ lọc</button>
                    <button class="btn btn-success" @onclick="ExportToPdf">Xuất PDF</button>
                </div>

            </div>
        </div>
    </div>
    <div class="card shadow rounded mt-3">
        <div class="p-3 d-flex flex-column gap-2">
            <div>
                <h4 class="text-center">Danh sách bài báo khoa học</h4>
            </div>

            <table class="table table-bordered table-hover" id="tableMagazines">
                <thead>
                    <tr>
                        <th scope="col">#</th>
                        <th scope="col">Tên bài báo</th>
                        <th scope="col">Năm công bố</th>
                        <th scope="col">Tên tạp chí</th>
                        <th scope="col">Loại bài báo</th>
                        <th scope="col">Phạm vi</th>
                        <th scope="col">Chỉ số</th>
                        <th scope="col">Xếp hạng</th>
                        <th scope="col">Người tham gia</th>
                    </tr>
                </thead>
                <tbody>
                    @if (listMagazines != null && listMagazines.Count > 0)
                    {
                        int i = 1;
                        var groupedByMagazine = listMagazines.GroupBy(x => x.magazine_id).ToList();

                        foreach (var group in groupedByMagazine)
                        {
                            var magazine = group.First().Magazines;
                            var scientists = group.Select(x => new { x.Scientist?.profile_name, RoleName = x.Role?.role_name }).ToList();

                            <tr>
                                <th scope="row">@i</th>
                                <td>@magazine?.magazine_name</td>
                                <td>@magazine?.year</td>
                                <td>@magazine?.journal</td>
                                <td>@magazine?.Paper?.paper_name</td>
                                <td>
                                    @{
                                        MagazineScope enumValue;
                                        string displayName = Enum.TryParse(@magazine?.magazine_scope, out enumValue)
                                        ? Helpers.EnumHelper.GetEnumDisplayName(enumValue)
                                        : "";
                                    }
                                    @displayName
                                </td>
                                <td>@magazine?.MagazineScore?.magazine_score_name</td>
                                <td>
                                    @{
                                        MagazineRank enumValueRank;
                                        string displayRank = Enum.TryParse(@magazine?.rank, out enumValueRank)
                                        ? Helpers.EnumHelper.GetEnumDisplayName(enumValueRank)
                                        : "";
                                    }
                                    @displayRank
                                </td>
                                <td>
                                    @string.Join(", ", scientists.Select(s => $"{s.profile_name} ({s.RoleName})"))
                                </td>
                            </tr>
                            i++;
                        }
                    }
                </tbody>
            </table>

            <div class="d-flex justify-content-center mt-3">
                <button class="btn btn-secondary" @onclick="PreviousPage" disabled="@((currentPage == 1))">Trang trước</button>
                <span class="mx-2 d-flex align-items-center">Trang @currentPage / @totalPages</span>
                <button class="btn btn-secondary" @onclick="NextPage" disabled="@((currentPage == totalPages))">Trang sau</button>
            </div>
        </div>
    </div>
}

<style>
    .auto-cols {
    display: flex;
    flex-direction: row;
    width: 100%;
    gap: 16px;
    justify-content: space-between;
    }

    .auto-cols > div {
    flex: 1;
    min-width: 200px;
    }

    .d-flex {
    display: flex;
    flex-direction: row;
    justify-content: right;
    }

    .text-red {
    color: red;
    }

</style>

@code {
    public List<ScientistMagazineRole> listMagazines { get; set; } = new();
    public List<Office> listOffices { get; set; } = new();
    public List<Paper> listPapers { get; set; } = new();
    private List<ScientistMagazineRole> allMagazines { get; set; } = new();

    private string selectedOfficeId { get; set; } = "";
    private int selectedYear { get; set; } = 0;
    private string selectedPaperId { get; set; } = "";
    private string selectedScope { get; set; } = "";

    private int currentPage = 1;
    private int pageSize = 10;
    private int totalPages => (int)Math.Ceiling((double)listMagazines.Count / pageSize);

    protected override async Task OnInitializedAsync()
    {
        await LoadScientists();
        await LoadOffices();
        await LoadPapers();
    }

    private async Task LoadScientists()
    {
        allMagazines = (await MagazineServices.GetAllMagazinesAsync())
            .Where(smr => smr.requestStatus == "Đã tham gia")
            .ToList();
        listMagazines = new List<ScientistMagazineRole>(allMagazines);
    }

    private async Task LoadOffices()
    {
        listOffices = await OfficeServices.GetListOffices();
    }

    private async Task LoadPapers()
    {
        listPapers = await PaperServices.GetListPaper();
    }

    private void ApplyFilter()
    {
        listMagazines = allMagazines
            .Where(m => (string.IsNullOrEmpty(selectedOfficeId) || m.Scientist?.office_id == selectedOfficeId)
                        && (selectedYear == 0 || m.Magazines?.year == selectedYear)
                        && (string.IsNullOrEmpty(selectedPaperId) || m.Magazines?.Paper?.id == selectedPaperId)
                        && (string.IsNullOrEmpty(selectedScope) || m.Magazines?.magazine_scope == selectedScope))
            .ToList();
    }

    private void ResetFilter()
    {
        selectedOfficeId = "";
        selectedYear = 0;
        selectedPaperId = "";
        selectedScope = "";
        listMagazines = new List<ScientistMagazineRole>(allMagazines);
    }

    private List<ScientistMagazineRole> GetPaginatedMagazines()
    {
        return listMagazines.Skip((currentPage - 1) * pageSize).Take(pageSize).ToList();
    }

    private void GoToPage(int pageNumber)
    {
        if (pageNumber >= 1 && pageNumber <= totalPages)
        {
            currentPage = pageNumber;
        }
    }

    private void NextPage()
    {
        if (currentPage < totalPages)
        {
            currentPage++;
        }
    }

    private void PreviousPage()
    {
        if (currentPage > 1)
        {
            currentPage--;
        }
    }

    private async Task ExportToPdf()
    {
        await JSRuntime.InvokeVoidAsync("exportToPdf", "tableMagazines");
    }

}
