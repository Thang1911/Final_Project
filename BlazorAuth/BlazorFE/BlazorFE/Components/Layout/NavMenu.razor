@implements IDisposable
@using Microsoft.AspNetCore.Authorization;

@inject NavigationManager NavigationManager
@inject IAuthorizationService AuthorizationService
@inject AuthenticationStateProvider AuthenticationStateProvider

<div class="top-row ps-3 navbar navbar-dark">
    <div class="container-fluid">
        <a class="navbar-brand" href="">Ứng Dụng Quản Lý</a>
    </div>
</div>

<input type="checkbox" title="Navigation menu" class="navbar-toggler" />

<div class="nav-scrollable" onclick="document.querySelector('.navbar-toggler').click()">
    <nav class="flex-column w-auto">
        <div class="nav-item px-3">
            <NavLink class="nav-link" href="" Match="NavLinkMatch.All">
                <span class="bi bi-house-door-fill-nav-menu" aria-hidden="true"></span> Trang chủ
            </NavLink>
        </div>
        
        @if (IsAdmin)
        {
            <div class="nav-item px-3">
                <NavLink class="nav-link" href="/ProfileDetail">
                    <span class="bi bi-house-door-fill-nav-menu" aria-hidden="true"></span> Danh sách đề tài/đề án
                </NavLink>
            </div>
        }


        <AuthorizeView>
            <Authorized>
                <div class="nav-item px-3">
                    <NavLink class="nav-link" href="/ProfileDetail">
                        <span class="bi bi-person-fill-nav-menu" aria-hidden="true"></span> Thông tin cá nhân
                    </NavLink>
                </div>
                <div class="nav-item px-3">
                    <NavLink class="nav-link" href="/ProfileDetail">
                        <span class="bi bi-house-door-fill-nav-menu" aria-hidden="true"></span> Đề xuất đề tài/đề án
                    </NavLink>
                </div>
                <div class="nav-item px-3">
                    <NavLink class="nav-link" href="/User/Topics">
                        <span class="bi bi-house-door-fill-nav-menu" aria-hidden="true"></span> Đề tài/Đề án
                    </NavLink>
                </div>
                <div class="nav-item px-3">
                    <NavLink class="nav-link" href="/ProfileDetail">
                        <span class="bi bi-house-door-fill-nav-menu" aria-hidden="true"></span> Bài báo khoa học
                    </NavLink>
                </div>
                <div class="nav-item px-3">
                    <NavLink class="nav-link" href="/ProfileDetail" >
                        <span class="bi bi-house-door-fill-nav-menu" aria-hidden="true"></span> Giáo trình/Sách tham khảo
                    </NavLink>
                </div>
                <div class="nav-item px-3">
                    <form action="Account/Logout" method="post">
                        <AntiforgeryToken />
                        <input type="hidden" name="ReturnUrl" value="@currentUrl" />
                        <button type="submit" class="nav-link">
                            <span class="bi bi-arrow-bar-left-nav-menu" aria-hidden="true"></span> Đăng xuất
                        </button>
                    </form>
                </div>
            </Authorized>
            <NotAuthorized>
                <div class="nav-item px-3">
                    <NavLink class="nav-link" href="Account/Register">
                        <span class="bi bi-person-nav-menu" aria-hidden="true"></span> Register
                    </NavLink>
                </div>
                <div class="nav-item px-3">
                    <NavLink class="nav-link" href="Account/Login">
                        <span class="bi bi-person-badge-nav-menu" aria-hidden="true"></span> Login
                    </NavLink>
                </div>
            </NotAuthorized>
        </AuthorizeView>
    </nav>
</div>

@code {
    private string? currentUrl;
    private bool IsAdmin = false;

    protected override void OnInitialized()
    {
        currentUrl = NavigationManager.ToBaseRelativePath(NavigationManager.Uri);
        NavigationManager.LocationChanged += OnLocationChanged;
    }

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity != null && user.Identity.IsAuthenticated)
        {
            var authorizationResult = await AuthorizationService.AuthorizeAsync(user, null, "Administrators");

            IsAdmin = authorizationResult.Succeeded;
        }
    }

    private void OnLocationChanged(object? sender, LocationChangedEventArgs e)
    {
        currentUrl = NavigationManager.ToBaseRelativePath(e.Location);
        StateHasChanged();
    }

    public void Dispose()
    {
        NavigationManager.LocationChanged -= OnLocationChanged;
    }
}

